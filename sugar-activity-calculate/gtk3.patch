diff -Naur Calculate-42.orig/calculate.py Calculate-42/calculate.py
--- Calculate-42.orig/calculate.py	2013-06-21 01:39:24.000000000 +0200
+++ Calculate-42/calculate.py	2014-11-27 05:44:40.218090087 +0100
@@ -24,20 +24,21 @@
 import os
 from gettext import gettext as _
 import string
+import base64
 import logging
 _logger = logging.getLogger('Calculate')
 
-import gobject
-import pygtk
-pygtk.require('2.0')
-import gtk
-import pango
-import base64
-
-from sugar.activity import activity
-import sugar.profile
-from sugar.graphics.icon import CanvasIcon
-from sugar.graphics.xocolor import XoColor
+#import gobject
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+from gi.repository import Gdk
+#import pango
+
+from sugar3.activity import activity
+import sugar3.profile
+from sugar3.graphics.icon import CanvasIcon
+from sugar3.graphics.xocolor import XoColor
 
 from shareable_activity import ShareableActivity
 from layout import CalcLayout
@@ -67,8 +68,8 @@
 
 def _textview_realize_cb(widget):
     '''Change textview properties once window is created.'''
-    win = widget.get_window(gtk.TEXT_WINDOW_TEXT)
-    win.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))
+    win = widget.get_window(Gtk.TextWindowType.TEXT)
+    win.set_cursor(Gdk.Cursor(Gdk.CursorType.HAND1))
     return False
 
 class Equation:
@@ -112,7 +113,7 @@
         if l[2].startswith("<svg>"):
             l[2] = SVGImage(data=base64.b64decode(l[2][5:]))
 
-# Should figure out how to use MathLib directly in a non-hacky way
+        # Should figure out how to use MathLib directly in a non-hacky way
         else:
             try:
                 l[2] = Decimal(l[2])
@@ -131,7 +132,7 @@
         return size
 
     def append_with_superscript_tags(self, buf, text, *tags):
-        '''Add a text to a gtk.TextBuffer with superscript tags.'''
+        '''Add a text to a Gtk.TextBuffer with superscript tags.'''
 
         fontsize = self.determine_font_size(*tags)
         _logger.debug('font-size: %d', fontsize)
@@ -157,16 +158,16 @@
 
     def create_lasteq_textbuf(self):
         '''
-        Return a gtk.TextBuffer properly formatted for last equation
-        gtk.TextView.
+        Return a Gtk.TextBuffer properly formatted for last equation
+        Gtk.TextView.
         '''
 
         is_error = isinstance(self.result, ParserError)
-        buf = gtk.TextBuffer()
+        buf = Gtk.TextBuffer()
         tagsmallnarrow = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW)
         tagbignarrow = buf.create_tag(font=CalcLayout.FONT_BIG_NARROW)
         tagbigger = buf.create_tag(font=CalcLayout.FONT_BIGGER)
-        tagjustright = buf.create_tag(justification=gtk.JUSTIFY_RIGHT)
+        tagjustright = buf.create_tag(justification=Gtk.Justification.RIGHT)
         tagred = buf.create_tag(foreground='#FF0000')
 
         # Add label and equation
@@ -203,35 +204,34 @@
         """
         Create a history object for this equation.
         In case of an SVG result this will be the image, otherwise it will
-        return a properly formatted gtk.TextView.
+        return a properly formatted Gtk.TextView.
         """
 
         if isinstance(self.result, SVGImage):
             return self.result.get_image()
 
-        w = gtk.TextView()
-        w.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(self.color.get_fill_color()))
-        w.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse(self.color.get_stroke_color()))
-        w.set_wrap_mode(gtk.WRAP_WORD_CHAR)
-        w.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_RIGHT, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_TOP, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_BOTTOM, 4)
+        w = Gtk.TextView()
+        w.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_fill_color()))
+        w.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_stroke_color()))
+        w.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
+        w.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        w.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
         w.connect('realize', _textview_realize_cb)
         buf = w.get_buffer()
 
         tagsmall = buf.create_tag(font=CalcLayout.FONT_SMALL)
         tagsmallnarrow = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW)
         tagbig = buf.create_tag(font=CalcLayout.FONT_BIG,
-            justification=gtk.JUSTIFY_RIGHT)
-        # TODO Fix for old Sugar 0.82 builds, red_float not available
-        bright = (gtk.gdk.color_parse(self.color.get_fill_color()).red_float +
-                  gtk.gdk.color_parse(self.color.get_fill_color()).green_float +
-                  gtk.gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
+            justification=Gtk.Justification.RIGHT)
+        bright = (Gdk.color_parse(self.color.get_fill_color()).red_float +
+                  Gdk.color_parse(self.color.get_fill_color()).green_float +
+                  Gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
         if bright < 0.5:
-            col = gtk.gdk.color_parse('white')
+            col = Gdk.color_parse('white')
         else:
-            col = gtk.gdk.color_parse('black')
+            col = Gdk.color_parse('black')
         tagcolor = buf.create_tag(foreground=col)
 
         # Add label, equation and result
@@ -332,7 +332,7 @@
         self.KEYMAP['divide'] = self.ml.div_sym
         self.KEYMAP['equal'] = self.ml.equ_sym
 
-        self.clipboard = gtk.Clipboard()
+        self.clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
         self.select_reason = self.SELECT_SELECT
         self.buffer = u""
         self.showing_version = 0
@@ -342,7 +342,7 @@
 
         self.connect("key_press_event", self.keypress_cb)
         self.connect("destroy", self.cleanup_cb)
-        self.color = sugar.profile.get_color()
+        self.color = sugar3.profile.get_color()
 
         self.layout = CalcLayout(self)
         self.label_entry = self.layout.label_entry
@@ -483,8 +483,8 @@
                 res = RuntimeError(_('Can not assign label: will cause recursion'),
                         lastpos)
 
-# If parsing went ok, see if we have to replace the previous answer
-# to get a (more) exact result
+        # If parsing went ok, see if we have to replace the previous answer
+        # to get a (more) exact result
         if self.ans_inserted and not isinstance(res, ParserError) \
                 and not isinstance(res, SVGImage):
             ansvar = self.format_insert_ans()
@@ -517,30 +517,29 @@
         return res is not None
 
     def create_var_textview(self, name, value):
-        """Create a gtk.TextView for a variable"""
+        """Create a Gtk.TextView for a variable"""
 
         reserved = ["Ans", "LastEqn", "help"]
         if name in reserved:
             return None
-        w = gtk.TextView()
-        w.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(self.color.get_fill_color()))
-        w.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse(self.color.get_stroke_color()))
-        w.set_wrap_mode(gtk.WRAP_WORD_CHAR)
-        w.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_RIGHT, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_TOP, 4)
-        w.set_border_window_size(gtk.TEXT_WINDOW_BOTTOM, 4)
+        w = Gtk.TextView()
+        w.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_fill_color()))
+        w.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_stroke_color()))
+        w.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
+        w.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        w.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
         w.connect('realize', _textview_realize_cb)
         buf = w.get_buffer()
 
-        # TODO Fix for old Sugar 0.82 builds, red_float not available
-        bright = (gtk.gdk.color_parse(self.color.get_fill_color()).red_float +
-                  gtk.gdk.color_parse(self.color.get_fill_color()).green_float +
-                  gtk.gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
+        bright = (Gdk.color_parse(self.color.get_fill_color()).red_float +
+                  Gdk.color_parse(self.color.get_fill_color()).green_float +
+                  Gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
         if bright < 0.5:
-            col = gtk.gdk.color_parse('white')
+            col = Gdk.color_parse('white')
         else:
-            col = gtk.gdk.color_parse('black')
+            col = Gdk.color_parse('black')
 
         tag = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW,
                 foreground=col)
@@ -562,9 +561,9 @@
         self.clear()
         return True
 
-##########################################
-# Journal functions
-##########################################
+    ##########################################
+    # Journal functions
+    ##########################################
 
     def write_file(self, file_path):
         """Write journal entries, Calculate Journal Version (cjv) 1.0"""
@@ -580,7 +579,7 @@
             sel = (pos, pos)
             f.write("%s;%d;%d;%d\n" % (self.text_entry.get_text(), pos, sel[0], sel[1]))
 
-# In reverse order
+        # In reverse order
         for eq in self.old_eqs:
             f.write(str(eq))
 
@@ -623,9 +622,9 @@
             _logger.error('Unable to read journal entry, unknown version (%s)', version)
             return False
 
-##########################################
-# User interaction functions
-##########################################
+    ##########################################
+    # User interaction functions
+    ##########################################
 
     def remove_character(self, dir):
         pos = self.text_entry.get_position()
@@ -670,7 +669,7 @@
 
     def tab_complete(self):
 
-# Get start of variable name
+        # Get start of variable name
         str = self.text_entry.get_text()
         if len(str) == 0:
             return
@@ -688,17 +687,17 @@
         partial_name = str[start_ofs:end_ofs]
         _logger.debug('tab-completing %s...', partial_name)
 
-# Lookup matching variables
+        # Lookup matching variables
         vars = self.parser.get_names(start=partial_name)
         if len(vars) == 0:
             return False
 
-# Nothing selected, select first match
+        # Nothing selected, select first match
         if len(sel) == 0:
             name = vars[0]
             self.text_entry.set_text(str[:start_ofs] + name + str[end_ofs:])
 
-# Select next matching variable
+        # Select next matching variable
         else:
             full_name = str[start_ofs:sel[1]]
             if full_name not in vars:
@@ -712,10 +711,10 @@
         self.select_reason = self.SELECT_TAB
         return True
 
-# Selection related functions
+    # Selection related functions
 
     def expand_selection(self, dir):
-#        _logger.info('Expanding selection in dir %d', dir)
+        #_logger.info('Expanding selection in dir %d', dir)
         sel = self.text_entry.get_selection_bounds()
         slen = len(self.text_entry.get_text())
         pos = self.text_entry.get_position()
@@ -723,7 +722,8 @@
             sel = (pos, pos)
         if dir < 0:
             newpos = max(0, sel[0] + dir)
-            self.text_entry.set_position(newpos)   # apparently no such thing as a cursor position during select
+            # apparently no such thing as a cursor position during select
+            self.text_entry.set_position(newpos)
             self.text_entry.select_region(newpos, sel[1])
         elif dir > 0:
             newpos = min(sel[1] + dir, slen)
@@ -761,19 +761,19 @@
         if not self.text_entry.is_focus():
             return
 
-        key = gtk.gdk.keyval_name(event.keyval)
+        key = Gdk.keyval_name(event.keyval)
         if event.hardware_keycode == 219:
-            if (event.state & gtk.gdk.SHIFT_MASK):
+            if (event.state & Gdk.SHIFT_MASK):
                 key = 'divide'
             else:
                 key = 'multiply'
         _logger.debug('Key: %s (%r, %r)', key, event.keyval, event.hardware_keycode)
 
-        if event.state & gtk.gdk.CONTROL_MASK:
+        if event.state & Gdk.ModifierType.CONTROL_MASK:
             if self.CTRL_KEYMAP.has_key(key):
                 f = self.CTRL_KEYMAP[key]
                 return f(self)
-        elif (event.state & gtk.gdk.SHIFT_MASK) and self.SHIFT_KEYMAP.has_key(key):
+        elif (event.state & Gdk.ModifierType.SHIFT_MASK) and self.SHIFT_KEYMAP.has_key(key):
             f = self.SHIFT_KEYMAP[key]
             return f(self)
         elif unicode(key) in self.IDENTIFIER_CHARS:
@@ -805,12 +805,12 @@
     def add_text(self, input_str):
         self.button_pressed(self.TYPE_TEXT, input_str)
 
-# This function should be split up properly
+    # This function should be split up properly
     def button_pressed(self, str_type, input_str):
         sel = self.text_entry.get_selection_bounds()
         pos = self.text_entry.get_position()
 
-# If selection by tab completion just manipulate end
+        # If selection by tab completion just manipulate end
         if len(sel) == 2 and self.select_reason != self.SELECT_SELECT:
             pos = sel[1]
             sel = ()
@@ -902,9 +902,9 @@
             return ''
 
 def main():
-    win = gtk.Window(gtk.WINDOW_TOPLEVEL)
+    win = Gtk.Window(Gtk.WindowType.TOPLEVEL)
     t = Calculate(win)
-    gtk.main()
+    Gtk.main()
     return 0
 
 if __name__ == "__main__":
diff -Naur Calculate-42.orig/layout.py Calculate-42/layout.py
--- Calculate-42.orig/layout.py	2013-06-21 01:39:24.000000000 +0200
+++ Calculate-42/layout.py	2014-11-27 06:08:59.827390905 +0100
@@ -2,22 +2,22 @@
 # Copyright (C) 2012 Aneesh Dogra <lionaneesh@gmail.com>
 
 from gettext import gettext as _
-import pygtk
-pygtk.require('2.0')
-import gtk
-import pango
-from sugar.activity import activity
-import sugar.profile
-from sugar.graphics.roundbox import CanvasRoundBox
-from sugar.graphics.combobox import ComboBox
-from toolbars import *
 
-try:
-    from sugar.graphics.toolbarbox import ToolbarButton, ToolbarBox
-    from sugar.activity.widgets import ActivityToolbarButton
-    from sugar.activity.widgets import StopButton
-except ImportError:
-    pass
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+from gi.repository import Gdk
+from gi.repository import Pango
+
+from sugar3.activity import activity
+import sugar3.profile
+#from sugar3.graphics.roundbox import CanvasRoundBox
+from sugar3.graphics.combobox import ComboBox
+from sugar3.graphics.toolbarbox import ToolbarButton, ToolbarBox
+from sugar3.activity.widgets import ActivityToolbarButton
+from sugar3.activity.widgets import StopButton
+
+from toolbars import *
 
 class CalcLayout:
 
@@ -43,7 +43,7 @@
         self.create_dialog()
 
     def create_color(self, rf, gf, bf):
-        return gtk.gdk.Color(int(rf*0xFFFF), int(gf*0xFFFF), int(bf*0xFFFF))
+        return Gdk.Color(int(rf*0xFFFF), int(gf*0xFFFF), int(bf*0xFFFF))
 
     def create_button_data(self):
         """Create a list with button information. We need to do that here
@@ -54,7 +54,7 @@
         equ_sym = self._parent.ml.equ_sym
 
         self.button_data = [
-# [x, y, width, label, bgcol, cb]
+            # [x, y, width, label, bgcol, cb]
             [0, 0, 2, 1, u'\u2190', self.col_gray3, lambda w: self._parent.move_left()],
             [2, 0, 2, 1, u'\u2192', self.col_gray3, lambda w: self._parent.move_right()],
             [4, 0, 2, 1, u'\u232B', self.col_gray3, lambda w: self._parent.remove_character(-1)],
@@ -89,75 +89,63 @@
     def create_dialog(self):
         """Setup most of the dialog."""
 
-# Toolbar
-        try:
-            self._toolbar_box = ToolbarBox()
+        # Toolbar
+        toolbar_box = ToolbarBox()
 
-            activity_button = ActivityToolbarButton(self._parent)
-            self._toolbar_box.toolbar.insert(activity_button, 0)
+        activity_button = ActivityToolbarButton(self._parent)
+        toolbar_box.toolbar.insert(activity_button, 0)
             
-            def append(icon_name, label, page, position):
-                toolbar_button = ToolbarButton()
-                toolbar_button.props.page = page
-                toolbar_button.props.icon_name = icon_name
-                toolbar_button.props.label = label
-                self._toolbar_box.toolbar.insert(toolbar_button, position)
-
-            append('toolbar-edit',
-                   _('Edit'),
-                   EditToolbar(self._parent),
-                   -1)
+        def append(icon_name, label, page, position):
+            toolbar_button = ToolbarButton()
+            toolbar_button.props.page = page
+            toolbar_button.props.icon_name = icon_name
+            toolbar_button.props.label = label
+            toolbar_box.toolbar.insert(toolbar_button, position)
+
+        append('toolbar-edit',
+               _('Edit'),
+               EditToolbar(self._parent),
+               -1)
                                   
-            append('toolbar-algebra',
-                   _('Algebra'),
-                   AlgebraToolbar(self._parent),
-                   -1)
+        append('toolbar-algebra',
+               _('Algebra'),
+               AlgebraToolbar(self._parent),
+               -1)
             
-            append('toolbar-trigonometry',
-                   _('Trigonometry'),
-                   TrigonometryToolbar(self._parent),
-                   -1)
-
-            append('toolbar-boolean',
-                   _('Boolean'),
-                   BooleanToolbar(self._parent),
-                   -1)
-
-            self._misc_toolbar = MiscToolbar(
-                self._parent,
-                target_toolbar=self._toolbar_box.toolbar)
-
-            append('toolbar-constants',
-                   _('Miscellaneous'),
-                   self._misc_toolbar,
-                   5)
+        append('toolbar-trigonometry',
+               _('Trigonometry'),
+               TrigonometryToolbar(self._parent),
+               -1)
+
+        append('toolbar-boolean',
+               _('Boolean'),
+               BooleanToolbar(self._parent),
+               -1)
+
+        self._misc_toolbar = MiscToolbar(
+            self._parent,
+            target_toolbar=toolbar_box.toolbar)
+
+        append('toolbar-constants',
+               _('Miscellaneous'),
+               self._misc_toolbar,
+               5)
             
-            self._stop_separator = gtk.SeparatorToolItem()
-            self._stop_separator.props.draw = False
-            self._stop_separator.set_expand(True)
-            self._stop_separator.show()
-            self._toolbar_box.toolbar.insert(self._stop_separator, -1)
-
-            self._stop = StopButton(self._parent)
-            self._toolbar_box.toolbar.insert(self._stop, -1)
-
-            self._toolbar_box.show_all()
-            self._parent.set_toolbar_box(self._toolbar_box)
-
-        except NameError:
-            # Use old toolbar design
-            toolbox = activity.ActivityToolbox(self._parent)
-            self._parent.set_toolbox(toolbox)
-            toolbox.add_toolbar(_('Edit'), EditToolbar(self._parent))
-            toolbox.add_toolbar(_('Algebra'), AlgebraToolbar(self._parent))
-            toolbox.add_toolbar(_('Trigonometry'), TrigonometryToolbar(self._parent))
-            toolbox.add_toolbar(_('Boolean'), BooleanToolbar(self._parent))
-            toolbox.add_toolbar(_('Miscellaneous'), MiscToolbar(self._parent))
-            toolbox.show_all()
-
-# Some layout constants
-        self.input_font = pango.FontDescription(str='sans bold 12')
-        self.button_font = pango.FontDescription(str='sans bold 16')
+        self._separator = Gtk.SeparatorToolItem()
+        self._separator.props.draw = False
+        self._separator.set_expand(True)
+        self._separator.show()
+        toolbar_box.toolbar.insert(self._separator, -1)
+
+        self._stop = StopButton(self._parent)
+        toolbar_box.toolbar.insert(self._stop, -1)
+
+        toolbar_box.show_all()
+        self._parent.set_toolbar_box(toolbar_box)
+
+        # Some layout constants
+        self.input_font = Pango.FontDescription('sans bold 12')
+        self.button_font = Pango.FontDescription('sans bold 16')
         self.col_white = self.create_color(1.00, 1.00, 1.00)
         self.col_gray1 = self.create_color(0.76, 0.76, 0.76)
         self.col_gray2 = self.create_color(0.50, 0.50, 0.50)
@@ -165,52 +153,49 @@
         self.col_black = self.create_color(0.00, 0.00, 0.00)
         self.col_red = self.create_color(1.00, 0.00, 0.00)
 
-# Big - Table, 16 rows, 10 columns, homogeneously divided
-        self.grid = gtk.Table(26, 11, True)
+        # Big - Table, 16 rows, 10 columns
+        self.grid = Gtk.Table(26, 11, False)
         self.grid.set_border_width(0)
         self.grid.set_row_spacings(0)
         self.grid.set_col_spacings(4)
 
-# Left part: container and input
-        vc1 = gtk.VBox(False, 0)
-        hc1 = gtk.HBox(False, 10)
-        eb = gtk.EventBox()
+        # Left part: container and input
+        vc1 = Gtk.VBox(False, 0)
+        hc1 = Gtk.HBox(False, 10)
+        eb = Gtk.EventBox()
         eb.add(hc1)
-        eb.modify_bg(gtk.STATE_NORMAL, self.col_black)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
         eb.set_border_width(12)
-        eb2 = gtk.EventBox()
+        eb2 = Gtk.EventBox()
         eb2.add(eb)
-        eb2.modify_bg(gtk.STATE_NORMAL, self.col_black)
-        label1 = gtk.Label(_('Label:'))
-        label1.modify_fg(gtk.STATE_NORMAL, self.col_white)
+        eb2.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        label1 = Gtk.Label(_('Label:'))
+        label1.modify_fg(Gtk.StateType.NORMAL, self.col_white)
         label1.set_alignment(1, 0.5)
         hc1.pack_start(label1, expand=False, fill=False, padding=10)
-        self.label_entry = gtk.Entry()
-        self.label_entry.modify_bg(gtk.STATE_INSENSITIVE, self.col_black)
+        self.label_entry = Gtk.Entry()
+        self.label_entry.modify_bg(Gtk.StateType.INSENSITIVE, self.col_black)
         hc1.pack_start(self.label_entry, expand=True, fill=True, padding=0)
-        vc1.pack_start(eb2, expand=False)
+        vc1.pack_start(eb2, expand=False, fill=True, padding=0)
         
-        self.text_entry = gtk.Entry()
-        try:
-            self.text_entry.props.im_module = 'gtk-im-context-simple'
-        except AttributeError:
-            pass
+        self.text_entry = Gtk.Entry()
+        self.text_entry.props.im_module = 'gtk-im-context-simple'
         self.text_entry.set_size_request(-1, 75)
         self.text_entry.connect('key_press_event', self._parent.ignore_key_cb)
         self.text_entry.modify_font(self.input_font)
-        self.text_entry.modify_bg(gtk.STATE_INSENSITIVE, self.col_black)
-        eb = gtk.EventBox()
+        self.text_entry.modify_bg(Gtk.StateType.INSENSITIVE, self.col_black)
+        eb = Gtk.EventBox()
         eb.add(self.text_entry)
-        eb.modify_bg(gtk.STATE_NORMAL, self.col_black)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
         eb.set_border_width(12)
-        eb2 = gtk.EventBox()
+        eb2 = Gtk.EventBox()
         eb2.add(eb)
-        eb2.modify_bg(gtk.STATE_NORMAL, self.col_black)
+        eb2.modify_bg(Gtk.StateType.NORMAL, self.col_black)
         vc1.pack_start(eb2, expand=True, fill=True, padding=0)
         self.grid.attach(vc1, 0, 7, 0, 6)
 
-# Left part: buttons
-        self.pad = gtk.Table(9, 6, True)
+        # Left part: buttons
+        self.pad = Gtk.Table(9, 6, False)
         self.pad.set_row_spacings(12)
         self.pad.set_col_spacings(12)
         self.pad.set_border_width(12)
@@ -221,69 +206,68 @@
             self.buttons[cap] = button
             self.pad.attach(button, x, x + w, y, y + h)
 
-        eb = gtk.EventBox()
+        eb = Gtk.EventBox()
         eb.add(self.pad)
-        eb.modify_bg(gtk.STATE_NORMAL, self.col_black)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
         self.grid.attach(eb, 0, 7, 6, 26)
 
-# Right part: container and equation button
-        hc2 = gtk.HBox()
+        # Right part: container and equation button
+        hc2 = Gtk.HBox()
         combo = ComboBox()
         combo.append_item(0, _('All equations'))
         combo.append_item(1, _('My equations'))
         combo.append_item(2, _('Show variables'))
         combo.set_active(0)
         combo.connect('changed', self._history_filter_cb)
-        hc2.pack_start(combo) 
+        hc2.pack_start(combo, expand=True, fill=True, padding=0) 
         hc2.set_border_width(6)
         self.grid.attach(hc2, 7, 11, 0, 2)
         
-# Right part: last equation
-        self.last_eq = gtk.TextView()
+        # Right part: last equation
+        self.last_eq = Gtk.TextView()
         self.last_eq.set_editable(False)
-        self.last_eq.set_wrap_mode(gtk.WRAP_WORD_CHAR)
+        self.last_eq.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
         self.last_eq.connect('realize', self._textview_realize_cb)
-        self.last_eq.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(
-                                 sugar.profile.get_color().get_fill_color()))
-        self.last_eq.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse(
-                                 sugar.profile.get_color().get_stroke_color()))
-        self.last_eq.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 4)
-        self.last_eq.set_border_window_size(gtk.TEXT_WINDOW_RIGHT, 4)
-        self.last_eq.set_border_window_size(gtk.TEXT_WINDOW_TOP, 4)
-        self.last_eq.set_border_window_size(gtk.TEXT_WINDOW_BOTTOM, 4)
-
-        # TODO Fix for old Sugar 0.82 builds, red_float not available
-        bright = (gtk.gdk.color_parse(sugar.profile.get_color().get_fill_color()).red_float +
-                  gtk.gdk.color_parse(sugar.profile.get_color().get_fill_color()).green_float +
-                  gtk.gdk.color_parse(sugar.profile.get_color().get_fill_color()).blue_float) / 3.0
+        self.last_eq.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(
+                                 sugar3.profile.get_color().get_fill_color()))
+        self.last_eq.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(
+                                 sugar3.profile.get_color().get_stroke_color()))
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
+
+        bright = (Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).red_float +
+                  Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).green_float +
+                  Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).blue_float) / 3.0
         if bright < 0.5:
-            self.last_eq.modify_text(gtk.STATE_NORMAL, self.col_white)
+            self.last_eq.modify_text(Gtk.StateType.NORMAL, self.col_white)
         else:
-            self.last_eq.modify_text(gtk.STATE_NORMAL, self.col_black)
+            self.last_eq.modify_text(Gtk.StateType.NORMAL, self.col_black)
 
         self.grid.attach(self.last_eq, 7, 11, 2, 7)
 
-# Right part: history
-        scrolled_window = gtk.ScrolledWindow()
-        scrolled_window.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
+        # Right part: history
+        scrolled_window = Gtk.ScrolledWindow()
+        scrolled_window.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
 
-        self.history_vbox = gtk.VBox()
+        self.history_vbox = Gtk.VBox()
         self.history_vbox.set_homogeneous(False)
         self.history_vbox.set_border_width(0)
         self.history_vbox.set_spacing(4)
 
-        self.variable_vbox = gtk.VBox()
+        self.variable_vbox = Gtk.VBox()
         self.variable_vbox.set_homogeneous(False)
         self.variable_vbox.set_border_width(0)
         self.variable_vbox.set_spacing(4)
 
-        vbox = gtk.VBox()
-        vbox.pack_start(self.history_vbox)
-        vbox.pack_start(self.variable_vbox)
+        vbox = Gtk.VBox()
+        vbox.pack_start(self.history_vbox, expand=True, fill=True, padding=0)
+        vbox.pack_start(self.variable_vbox, expand=True, fill=True, padding=0)
         scrolled_window.add_with_viewport(vbox)
         self.grid.attach(scrolled_window, 7, 11, 7, 26)
 
-        gtk.gdk.screen_get_default().connect('size-changed',
+        Gdk.Screen.get_default().connect('size-changed',
                                              self._configure_cb)
 
     def _configure_cb(self, event):
@@ -328,45 +312,21 @@
             self.graph_selected = False
 
     def add_equation(self, textview, own, prepend=False):
-        """Add a gtk.TextView of an equation to the history_vbox."""
-
-        GraphEventBox = None
-        if isinstance(textview, gtk.Image):
-            # Add the image inside the eventBox
-            GraphEventBox = gtk.EventBox()
-            GraphEventBox.add(textview)
-            GraphEventBox.set_visible_window(False)
-            GraphEventBox.connect('button_press_event', self.toggle_select_graph)
-            GraphEventBox.show()
+        """Add a Gtk.TextView of an equation to the history_vbox."""
 
         if prepend:
-            if GraphEventBox:
-                self.history_vbox.pack_start(GraphEventBox, False, True)
-                self.history_vbox.reorder_child(GraphEventBox, 0)
-            else:
-                self.history_vbox.pack_start(textview, False, True)
-                self.history_vbox.reorder_child(textview, 0)
+            self.history_vbox.pack_start(textview, False, True, 0)
+            self.history_vbox.reorder_child(textview, 0)
         else:
-            if GraphEventBox:
-                self.history_vbox.pack_end(GraphEventBox, False, True)
-            else:
-                self.history_vbox.pack_end(textview, False, True)
+            self.history_vbox.pack_end(textview, False, True,0 )
 
         if own:
-            if GraphEventBox:
-                self._own_equations.append(GraphEventBox)
-                GraphEventBox.child.show()
-            else:
-                self._own_equations.append(textview)
-                textview.show()
+            self._own_equations.append(textview)
+            textview.show()
         else:
+            self._other_equations.append(textview)
             if self._showing_all_history:
-                if GraphEventBox:
-                    self._other_equations.append(GraphEventBox)
-                    GraphEventBox.child.show()
-                else:
-                    self._other_equations.append(textview)
-                    textview.show()
+                textview.show()
 
     def show_all_history(self):
         """Show both owned and other equations."""
@@ -387,14 +347,14 @@
                 key.hide()
 
     def add_variable(self, varname, textview):
-        """Add a gtk.TextView of a variable to the variable_vbox."""
+        """Add a Gtk.TextView of a variable to the variable_vbox."""
 
         if varname in self._var_textviews:
             self.variable_vbox.remove(self._var_textviews[varname])
             del self._var_textviews[varname]
 
         self._var_textviews[varname] = textview
-        self.variable_vbox.pack_start(textview, False, True)
+        self.variable_vbox.pack_start(textview, False, True, 0)
 
         # Reorder textviews for a sorted list
         names = self._var_textviews.keys()
@@ -412,7 +372,7 @@
 
     def create_button(self, cap, cb, fgcol, bgcol, width, height):
         """Create a button that is set up properly."""
-        button = gtk.Button(_(cap))
+        button = Gtk.Button(_(cap))
         self.modify_button_appearance(button, fgcol, bgcol, width, height)
         button.connect("clicked", cb)
         button.connect("key_press_event", self._parent.ignore_key_cb)
@@ -421,12 +381,11 @@
     def modify_button_appearance(self, button, fgcol, bgcol, width, height):
         """Modify button style."""
         width = 50 * width
-        height = 50 * height
         button.get_child().set_size_request(width, height)
         button.get_child().modify_font(self.button_font)
-        button.get_child().modify_fg(gtk.STATE_NORMAL, fgcol)
-        button.modify_bg(gtk.STATE_NORMAL, bgcol)
-        button.modify_bg(gtk.STATE_PRELIGHT, bgcol)
+        button.get_child().modify_fg(Gtk.StateType.NORMAL, fgcol)
+        button.modify_bg(Gtk.StateType.NORMAL, bgcol)
+        button.modify_bg(Gtk.StateType.PRELIGHT, bgcol)
 
     def _history_filter_cb(self, combo):
         selection = combo.get_active()
@@ -441,7 +400,7 @@
 
     def _textview_realize_cb(self, widget):
         '''Change textview properties once window is created.'''
-        win = widget.get_window(gtk.TEXT_WINDOW_TEXT)
-        win.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))
+        win = widget.get_window(Gtk.TextWindowType.TEXT)
+        win.set_cursor(Gdk.Cursor(Gdk.CursorType.HAND1))
         return False
 
diff -Naur Calculate-42.orig/setup.py Calculate-42/setup.py
--- Calculate-42.orig/setup.py	2014-11-27 05:45:33.132729582 +0100
+++ Calculate-42/setup.py	2014-11-27 05:44:40.218090087 +0100
@@ -1,3 +1,3 @@
 #!/usr/bin/python2
-from sugar.activity import bundlebuilder
+from sugar3.activity import bundlebuilder
 bundlebuilder.start()
diff -Naur Calculate-42.orig/setup.py.orig Calculate-42/setup.py.orig
--- Calculate-42.orig/setup.py.orig	1970-01-01 01:00:00.000000000 +0100
+++ Calculate-42/setup.py.orig	2014-11-27 05:44:23.951021928 +0100
@@ -0,0 +1,3 @@
+#!/usr/bin/python2
+from sugar.activity import bundlebuilder
+bundlebuilder.start()
diff -Naur Calculate-42.orig/shareable_activity.py Calculate-42/shareable_activity.py
--- Calculate-42.orig/shareable_activity.py	2013-06-21 01:24:58.000000000 +0200
+++ Calculate-42/shareable_activity.py	2014-11-27 05:44:40.218090087 +0100
@@ -3,9 +3,9 @@
 from dbus.service import method, signal
 import telepathy
 
-from sugar.activity import activity
-from sugar.presence import presenceservice
-from sugar.presence.sugartubeconn import SugarTubeConnection
+from sugar3.activity import activity
+from sugar3.presence import presenceservice
+from sugar3.presence.sugartubeconn import SugarTubeConnection
 
 import logging
 _logger = logging.getLogger('ShareableActivity')
diff -Naur Calculate-42.orig/svgimage.py Calculate-42/svgimage.py
--- Calculate-42.orig/svgimage.py	2013-06-21 01:24:58.000000000 +0200
+++ Calculate-42/svgimage.py	2014-11-27 05:44:40.218090087 +0100
@@ -20,8 +20,8 @@
 import logging
 _logger = logging.getLogger('SVGImage')
 
-import gtk
-import rsvg
+from gi.repository import Gtk
+from gi.repository import Rsvg
 
 class SVGImage:
 
@@ -38,9 +38,9 @@
         return self._svg_data
 
     def render_svg(self):
-        self._handle = rsvg.Handle(data=self._svg_data)
+        self._handle = Rsvg.Handle.new_from_data(self._svg_data)
         self._pixbuf = self._handle.get_pixbuf()
-        self._image = gtk.Image()
+        self._image = Gtk.Image()
         self._image.set_from_pixbuf(self._pixbuf)
         self._image.set_alignment(0.5, 0)
         return self._image
diff -Naur Calculate-42.orig/toolbars.py Calculate-42/toolbars.py
--- Calculate-42.orig/toolbars.py	2013-06-21 01:39:24.000000000 +0200
+++ Calculate-42/toolbars.py	2014-11-27 05:44:40.218090087 +0100
@@ -1,16 +1,18 @@
 # -*- coding: utf-8 -*-
 # toolbars.py, see CalcActivity.py for info
 
-import pygtk
-pygtk.require('2.0')
-import gtk
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+from gi.repository import Gdk
+
 from mathlib import MathLib
 
-from sugar.graphics.palette import Palette
-from sugar.graphics.menuitem import MenuItem
-from sugar.graphics.toolbutton import ToolButton
-from sugar.graphics.toggletoolbutton import ToggleToolButton
-from sugar.graphics.style import GRID_CELL_SIZE
+from sugar3.graphics.palette import Palette
+from sugar3.graphics.menuitem import MenuItem
+from sugar3.graphics.toolbutton import ToolButton
+from sugar3.graphics.toggletoolbutton import ToggleToolButton
+from sugar3.graphics.style import GRID_CELL_SIZE
 
 import logging
 _logger = logging.getLogger('calc-activity')
@@ -21,7 +23,7 @@
     if name == '':
         return False
 
-    theme = gtk.icon_theme_get_default()
+    theme = Gtk.IconTheme.get_default()
     info = theme.lookup_icon(name, 0, 0)
     if info:
         return True
@@ -33,12 +35,13 @@
         ToolButton.__init__(self)
 
         if _icon_exists(icon_name):
-            self.set_icon(icon_name)
+            #self.set_icon(icon_name)
+            self.props.icon_name = icon_name
         else:
             if alt_html == '':
                 alt_html = icon_name
 
-            label = gtk.Label()
+            label = Gtk.Label()
             label.set_markup(alt_html)
             label.show()
             self.set_label_widget(label)
@@ -64,7 +67,8 @@
         ToggleToolButton.__init__(self)
         self.items = items
         if 'icon' in items[0] and _icon_exists(items[0]['icon']):
-            self.set_named_icon(items[0]['icon'])
+            #self.set_named_icon(items[0]['icon'])
+            self.props.icon_name = items[0]['icon']
         elif 'html' in items[0]:
             self.set_label(items[0]['html'])
 #        self.set_tooltip(items[0][1])
@@ -77,7 +81,8 @@
         self.selected = (self.selected + 1) % len(self.items)
         but = self.items[self.selected]
         if 'icon' in but and _icon_exists(but['icon']):
-            self.set_named_icon(but['icon'])
+            #self.set_named_icon(but['icon'])
+            self.props.icon_name = but['icon']
         elif 'html' in but:
             _logger.info('Setting html: %s', but['html'])
             self.set_label(but['html'])
@@ -88,9 +93,9 @@
             else:
                 self.callback(but)
 
-class TextToggleToolButton(gtk.ToggleToolButton):
+class TextToggleToolButton(Gtk.ToggleToolButton):
     def __init__(self, items, cb, desc, index=False):
-        gtk.ToggleToolButton.__init__(self)
+        Gtk.ToggleToolButton.__init__(self)
         self.items = items
         self.set_label(items[0])
         self.selected = 0
@@ -109,14 +114,14 @@
             else:
                 self.callback(but)
 
-class LineSeparator(gtk.SeparatorToolItem):
+class LineSeparator(Gtk.SeparatorToolItem):
     def __init__(self):
-        gtk.SeparatorToolItem.__init__(self)
+        Gtk.SeparatorToolItem.__init__(self)
         self.set_draw(True)
 
-class EditToolbar(gtk.Toolbar):
+class EditToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         copy_tool = ToolButton('edit-copy')
         copy_tool.set_tooltip(_('Copy'))
@@ -141,9 +146,9 @@
                         
         self.show_all()
 
-class AlgebraToolbar(gtk.Toolbar):
+class AlgebraToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('algebra-square', _('Square'),
             lambda x: calc.button_pressed(calc.TYPE_OP_POST, '**2'),
@@ -184,9 +189,9 @@
             
         self.show_all()
 
-class TrigonometryToolbar(gtk.Toolbar):
+class TrigonometryToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('trigonometry-sin', _('Sine'),
             lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'sin'),
@@ -230,9 +235,9 @@
             
         self.show_all()
 
-class BooleanToolbar(gtk.Toolbar):
+class BooleanToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('boolean-and', _('Logical and'),
             lambda x: calc.button_pressed(calc.TYPE_OP_POST, '&'),
@@ -256,11 +261,11 @@
             
         self.show_all()
 
-class MiscToolbar(gtk.Toolbar):
+class MiscToolbar(Gtk.Toolbar):
     def __init__(self, calc, target_toolbar=None):
         self._target_toolbar = target_toolbar
 
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('constants-pi', _('Pi'),
             lambda x: calc.button_pressed(calc.TYPE_TEXT, 'pi'),
@@ -329,7 +334,7 @@
         self.show_all()
 
     def update_layout(self):
-        if gtk.gdk.screen_width() < 14 * GRID_CELL_SIZE or \
+        if Gdk.Screen.width() < 14 * GRID_CELL_SIZE or \
                 self._target_toolbar is None:
             target_toolbar = self
             if self._target_toolbar is not None:
diff -Naur Calculate-42.orig/toolbars.py.orig Calculate-42/toolbars.py.orig
--- Calculate-42.orig/toolbars.py.orig	1970-01-01 01:00:00.000000000 +0100
+++ Calculate-42/toolbars.py.orig	2013-06-21 01:39:24.000000000 +0200
@@ -0,0 +1,385 @@
+# -*- coding: utf-8 -*-
+# toolbars.py, see CalcActivity.py for info
+
+import pygtk
+pygtk.require('2.0')
+import gtk
+from mathlib import MathLib
+
+from sugar.graphics.palette import Palette
+from sugar.graphics.menuitem import MenuItem
+from sugar.graphics.toolbutton import ToolButton
+from sugar.graphics.toggletoolbutton import ToggleToolButton
+from sugar.graphics.style import GRID_CELL_SIZE
+
+import logging
+_logger = logging.getLogger('calc-activity')
+
+from gettext import gettext as _
+
+def _icon_exists(name):
+    if name == '':
+        return False
+
+    theme = gtk.icon_theme_get_default()
+    info = theme.lookup_icon(name, 0, 0)
+    if info:
+        return True
+
+    return False
+
+class IconToolButton(ToolButton):
+    def __init__(self, icon_name, text, cb, help_cb=None, alt_html=''):
+        ToolButton.__init__(self)
+
+        if _icon_exists(icon_name):
+            self.set_icon(icon_name)
+        else:
+            if alt_html == '':
+                alt_html = icon_name
+
+            label = gtk.Label()
+            label.set_markup(alt_html)
+            label.show()
+            self.set_label_widget(label)
+
+        self.create_palette(text, help_cb)
+
+        self.connect('clicked', cb)
+
+    def create_palette(self, text, help_cb):
+        p = Palette(text)
+
+        if help_cb is not None:
+            item = MenuItem(_('Help'), 'action-help')
+            item.connect('activate', help_cb)
+            item.show()
+            p.menu.append(item)
+
+        self.set_palette(p)
+
+class IconToggleToolButton(ToggleToolButton):
+
+    def __init__(self, items, cb, desc):
+        ToggleToolButton.__init__(self)
+        self.items = items
+        if 'icon' in items[0] and _icon_exists(items[0]['icon']):
+            self.set_named_icon(items[0]['icon'])
+        elif 'html' in items[0]:
+            self.set_label(items[0]['html'])
+#        self.set_tooltip(items[0][1])
+        self.set_tooltip(desc)
+        self.selected = 0
+        self.connect('clicked', self.toggle_button)
+        self.callback = cb
+
+    def toggle_button(self, w):
+        self.selected = (self.selected + 1) % len(self.items)
+        but = self.items[self.selected]
+        if 'icon' in but and _icon_exists(but['icon']):
+            self.set_named_icon(but['icon'])
+        elif 'html' in but:
+            _logger.info('Setting html: %s', but['html'])
+            self.set_label(but['html'])
+#        self.set_tooltip(but[1])
+        if self.callback is not None:
+            if 'html' in but:
+                self.callback(but['html'])
+            else:
+                self.callback(but)
+
+class TextToggleToolButton(gtk.ToggleToolButton):
+    def __init__(self, items, cb, desc, index=False):
+        gtk.ToggleToolButton.__init__(self)
+        self.items = items
+        self.set_label(items[0])
+        self.selected = 0
+        self.connect('clicked', self.toggle_button)
+        self.callback = cb
+        self.index = index
+        self.set_tooltip_text(desc)
+
+    def toggle_button(self, w):
+        self.selected = (self.selected + 1) % len(self.items)
+        but = self.items[self.selected]
+        self.set_label(but)
+        if self.callback is not None:
+            if self.index:
+                self.callback(self.selected)
+            else:
+                self.callback(but)
+
+class LineSeparator(gtk.SeparatorToolItem):
+    def __init__(self):
+        gtk.SeparatorToolItem.__init__(self)
+        self.set_draw(True)
+
+class EditToolbar(gtk.Toolbar):
+    def __init__(self, calc):
+        gtk.Toolbar.__init__(self)
+
+        copy_tool = ToolButton('edit-copy')
+        copy_tool.set_tooltip(_('Copy'))
+        copy_tool.set_accelerator(_('<ctrl>c'))
+        copy_tool.connect('clicked', lambda x: calc.text_copy())
+        self.insert(copy_tool, -1)
+
+        menu_item = MenuItem(_('Cut'))
+
+        try:
+            menu_item.set_accelerator(_('<ctrl>x'))
+        except AttributeError:
+            pass
+
+        menu_item.connect('activate', lambda x: calc.text_cut())
+        menu_item.show()
+        copy_tool.get_palette().menu.append(menu_item)
+
+        self.insert(IconToolButton('edit-paste', _('Paste'),
+            lambda x: calc.text_paste(),
+            alt_html='Paste'), -1)
+                        
+        self.show_all()
+
+class AlgebraToolbar(gtk.Toolbar):
+    def __init__(self, calc):
+        gtk.Toolbar.__init__(self)
+
+        self.insert(IconToolButton('algebra-square', _('Square'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '**2'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(square)'),
+            alt_html='x<sup>2</sup>'), -1)
+
+        self.insert(IconToolButton('algebra-sqrt', _('Square root'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'sqrt'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(sqrt)'),
+            alt_html='√x'), -1)
+
+        self.insert(IconToolButton('algebra-xinv', _('Inverse'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '**-1'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(inv)'),
+            alt_html='x<sup>-1</sup>'), -1)
+
+        self.insert(LineSeparator(), -1)
+
+        self.insert(IconToolButton('algebra-exp', _('e to the power x'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'exp'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(exp)'),
+            alt_html='e<sup>x</sup>'), -1)
+
+        self.insert(IconToolButton('algebra-xpowy', _('x to the power y'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'pow'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(pow)'),
+            alt_html='x<sup>y</sup>'), -1)
+
+        self.insert(IconToolButton('algebra-ln', _('Natural logarithm'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'ln'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(ln)')), -1)
+
+        self.insert(LineSeparator(), -1)
+
+        self.insert(IconToolButton('algebra-fac', _('Factorial'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'fac'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(fac)')), -1)
+            
+        self.show_all()
+
+class TrigonometryToolbar(gtk.Toolbar):
+    def __init__(self, calc):
+        gtk.Toolbar.__init__(self)
+
+        self.insert(IconToolButton('trigonometry-sin', _('Sine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'sin'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(sin)')), -1)
+
+        self.insert(IconToolButton('trigonometry-cos', _('Cosine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'cos'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(cos)')), -1)
+
+        self.insert(IconToolButton('trigonometry-tan', _('Tangent'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'tan'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(tan)')), -1)
+
+        self.insert(LineSeparator(), -1)
+
+        self.insert(IconToolButton('trigonometry-asin', _('Arc sine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'asin'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(asin)')), -1)
+
+        self.insert(IconToolButton('trigonometry-acos', _('Arc cosine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'acos'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(acos)')), -1)
+
+        self.insert(IconToolButton('trigonometry-atan', _('Arc tangent'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'atan'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(atan)')), -1)
+
+        self.insert(LineSeparator(), -1)
+
+        self.insert(IconToolButton('trigonometry-sinh', _('Hyperbolic sine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'sinh'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(sinh)')), -1)
+
+        self.insert(IconToolButton('trigonometry-cosh', _('Hyperbolic cosine'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'cosh'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(cosh)')), -1)
+
+        self.insert(IconToolButton('trigonometry-tanh', _('Hyperbolic tangent'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'tanh'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(tanh)')), -1)
+            
+        self.show_all()
+
+class BooleanToolbar(gtk.Toolbar):
+    def __init__(self, calc):
+        gtk.Toolbar.__init__(self)
+
+        self.insert(IconToolButton('boolean-and', _('Logical and'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '&'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(And)')), -1)
+
+        self.insert(IconToolButton('boolean-or', _('Logical or'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '|'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(Or)')), -1)
+
+#        self.insert(IconToolButton('boolean-xor', _('Logical xor'),
+#            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '^'),
+#            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(xor)')), -1)
+
+        self.insert(LineSeparator(), -1)
+
+        self.insert(IconToolButton('boolean-eq', _('Equals'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '==')), -1)
+
+        self.insert(IconToolButton('boolean-neq', _('Not equals'),
+            lambda x: calc.button_pressed(calc.TYPE_OP_POST, '!=')), -1)
+            
+        self.show_all()
+
+class MiscToolbar(gtk.Toolbar):
+    def __init__(self, calc, target_toolbar=None):
+        self._target_toolbar = target_toolbar
+
+        gtk.Toolbar.__init__(self)
+
+        self.insert(IconToolButton('constants-pi', _('Pi'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'pi'),
+            alt_html='π'), -1)
+
+        self.insert(IconToolButton('constants-e', _('e'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'e')), -1)
+
+        self.insert(IconToolButton('constants-eulersconstant', _('γ'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, '0.577215664901533')), -1)
+
+        self.insert(IconToolButton('constants-goldenratio', _('φ'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, '1.618033988749895')), -1)
+
+        self._line_separator1 = LineSeparator()
+        self._line_separator2 = LineSeparator()
+
+        self._plot_button = IconToolButton('plot', _('Plot'),
+            lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'plot'),
+            lambda x: calc.button_pressed(calc.TYPE_TEXT, 'help(plot)'))
+
+        el = [
+            {'icon': 'format-deg', 'desc': _('Degrees'), 'html': 'deg'},
+            {'icon': 'format-rad', 'desc': _('Radians'), 'html': 'rad'},
+        ]
+        self._angle_button = IconToggleToolButton(
+            el, 
+            lambda x: self.update_angle_type(x, calc),
+            _('Degrees / Radians'))
+        self.update_angle_type('deg', calc)
+
+        el = [
+            {'icon': 'format-sci', 'html': 'sci'},
+            {'icon': 'format-exp', 'html': 'exp'},
+        ]
+        self._format_button = IconToggleToolButton(
+            el,
+            lambda x: self.update_format_type(x, calc),
+            _('Exponent / Scientific notation'))
+
+        el = [
+            {'icon': 'digits-9', 'html': '9'},
+            {'icon': 'digits-12', 'html': '12'},
+            {'icon': 'digits-15', 'html': '15'},
+            {'icon': 'digits-6', 'html': '6'},
+        ]
+        self._digits_button = IconToggleToolButton(
+                el,
+                lambda x: self.update_digits(x, calc),
+                _('Number of shown digits'))
+
+        el = [
+            {'icon': 'base-10', 'html': '10'},
+            {'icon': 'base-2', 'html': '2'},
+            {'icon': 'base-16', 'html': '16'},
+            {'icon': 'base-8', 'html': '8'}
+        ]
+         
+        self._base_button = IconToggleToolButton(
+            el,
+            lambda x: self.update_int_base(x, calc),
+            _('Integer formatting base'))
+
+        self.update_layout()
+
+        self.show_all()
+
+    def update_layout(self):
+        if gtk.gdk.screen_width() < 14 * GRID_CELL_SIZE or \
+                self._target_toolbar is None:
+            target_toolbar = self
+            if self._target_toolbar is not None:
+                self._remove_buttons(self._target_toolbar)
+        else:
+            target_toolbar = self._target_toolbar
+            self._remove_buttons(self)
+
+        target_toolbar.insert(self._line_separator1, -1)
+
+        target_toolbar.insert(self._plot_button, -1)
+
+        target_toolbar.insert(self._line_separator2, -1)
+
+        target_toolbar.insert(self._angle_button, -1)
+        target_toolbar.insert(self._format_button, -1)
+        target_toolbar.insert(self._digits_button, -1)
+        target_toolbar.insert(self._base_button, -1)
+
+    def _remove_buttons(self, toolbar):
+        for item in [self._plot_button, self._line_separator1,
+                     self._line_separator2, self._angle_button,
+                     self._format_button, self._digits_button,
+                     self._base_button]:
+            toolbar.remove(item)
+
+    def update_angle_type(self, text, calc):
+        var = calc.parser.get_var('angle_scaling')
+        if var is None:
+            _logger.warning('Variable angle_scaling not defined.')
+            return
+
+        if text == 'deg':
+            var.value = MathLib.ANGLE_DEG
+        elif text == 'rad':
+            var.value = MathLib.ANGLE_RAD
+        _logger.debug('Angle scaling: %s', var.value)
+
+    def update_format_type(self, text, calc):
+        if text == 'exp':
+            calc.ml.set_format_type(MathLib.FORMAT_EXPONENT)
+        elif text == 'sci':
+            calc.ml.set_format_type(MathLib.FORMAT_SCIENTIFIC)
+        _logger.debug('Format type: %s', calc.ml.format_type)
+
+    def update_digits(self, text, calc):
+        calc.ml.set_digit_limit(int(text))
+        _logger.debug('Digit limit: %s', calc.ml.digit_limit)
+
+    def update_int_base(self, text, calc):
+        calc.ml.set_integer_base(int(text))
+        _logger.debug('Integer base: %s', calc.ml.integer_base)
+
