diff --git a/activity/activity.info b/activity/activity.info
index a0e1212..e2e3c52 100644
--- a/activity/activity.info
+++ b/activity/activity.info
@@ -1,6 +1,7 @@
 [Activity]
 name = Calculate
+summary = This is the place to get the answer to a quick problem, but that is not the limit! You can also explore Algebra, Trigonometry, Boolean and more!
 bundle_id = org.laptop.Calculate
 icon = calculate
 exec = sugar-activity calculate.Calculate -s
 activity_version = 39
diff --git a/calculate.py b/calculate.py
index e1523c9..6b79e90 100644
--- a/calculate.py
+++ b/calculate.py
@@ -24,20 +24,21 @@ import types
 import os
 from gettext import gettext as _
 import string
+import base64
 import logging
 _logger = logging.getLogger('Calculate')
 
-import gobject
-import pygtk
-pygtk.require('2.0')
-import gtk
-import pango
-import base64
+#import gobject
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+from gi.repository import Gdk
+#import pango
 
-from sugar.activity import activity
-import sugar.profile
-from sugar.graphics.icon import CanvasIcon
-from sugar.graphics.xocolor import XoColor
+from sugar3.activity import activity
+import sugar3.profile
+from sugar3.graphics.icon import CanvasIcon
+from sugar3.graphics.xocolor import XoColor
 
 from shareable_activity import ShareableActivity
 from layout import CalcLayout
@@ -67,8 +68,8 @@ def findchar(text, chars, ofs=0):
 
 def _textview_realize_cb(widget):
     '''Change textview properties once window is created.'''
-    win = widget.get_window(gtk.TEXT_WINDOW_TEXT)
-    win.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))
+    win = widget.get_window(Gtk.TextWindowType.TEXT)
+    win.set_cursor(Gdk.Cursor(Gdk.CursorType.HAND1))
     return False
 
 class Equation:
@@ -112,7 +113,7 @@ class Equation:
         if l[2].startswith("<svg>"):
             l[2] = SVGImage(data=base64.b64decode(l[2][5:]))
 
-# Should figure out how to use MathLib directly in a non-hacky way
+        # Should figure out how to use MathLib directly in a non-hacky way
         else:
             try:
                 l[2] = Decimal(l[2])
@@ -131,7 +132,7 @@ class Equation:
         return size
 
     def append_with_superscript_tags(self, buf, text, *tags):
-        '''Add a text to a gtk.TextBuffer with superscript tags.'''
+        '''Add a text to a Gtk.TextBuffer with superscript tags.'''
 
         fontsize = self.determine_font_size(*tags)
         _logger.debug('font-size: %d', fontsize)
@@ -157,16 +158,16 @@ class Equation:
 
     def create_lasteq_textbuf(self):
         '''
-        Return a gtk.TextBuffer properly formatted for last equation
-        gtk.TextView.
+        Return a Gtk.TextBuffer properly formatted for last equation
+        Gtk.TextView.
         '''
 
         is_error = isinstance(self.result, ParserError)
-        buf = gtk.TextBuffer()
+        buf = Gtk.TextBuffer()
         tagsmallnarrow = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW)
         tagbignarrow = buf.create_tag(font=CalcLayout.FONT_BIG_NARROW)
         tagbigger = buf.create_tag(font=CalcLayout.FONT_BIGGER)
-        tagjustright = buf.create_tag(justification=gtk.JUSTIFY_RIGHT)
+        tagjustright = buf.create_tag(justification=Gtk.Justification.RIGHT)
         tagred = buf.create_tag(foreground='#FF0000')
 
         # Add label and equation
@@ -203,22 +204,34 @@ class Equation:
         """
         Create a history object for this equation.
         In case of an SVG result this will be the image, otherwise it will
-        return a properly formatted gtk.TextView.
+        return a properly formatted Gtk.TextView.
         """
 
         if isinstance(self.result, SVGImage):
             return self.result.get_image()
 
-        w = gtk.TextView()
-        w.set_wrap_mode(gtk.WRAP_WORD)
+        w = Gtk.TextView()
+        w.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_fill_color()))
+        w.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_stroke_color()))
+        w.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
+        w.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        w.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
         w.connect('realize', _textview_realize_cb)
         buf = w.get_buffer()
 
         tagsmall = buf.create_tag(font=CalcLayout.FONT_SMALL)
         tagsmallnarrow = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW)
         tagbig = buf.create_tag(font=CalcLayout.FONT_BIG,
-            justification=gtk.JUSTIFY_RIGHT)
-        col = self.color.get_fill_color()
+            justification=Gtk.Justification.RIGHT)
+        bright = (Gdk.color_parse(self.color.get_fill_color()).red_float +
+                  Gdk.color_parse(self.color.get_fill_color()).green_float +
+                  Gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
+        if bright < 0.5:
+            col = Gdk.color_parse('white')
+        else:
+            col = Gdk.color_parse('black')
         tagcolor = buf.create_tag(foreground=col)
 
         # Add label, equation and result
@@ -319,7 +332,7 @@ class Calculate(ShareableActivity):
         self.KEYMAP['divide'] = self.ml.div_sym
         self.KEYMAP['equal'] = self.ml.equ_sym
 
-        self.clipboard = gtk.Clipboard()
+        self.clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
         self.select_reason = self.SELECT_SELECT
         self.buffer = u""
         self.showing_version = 0
@@ -329,10 +342,7 @@ class Calculate(ShareableActivity):
 
         self.connect("key_press_event", self.keypress_cb)
         self.connect("destroy", self.cleanup_cb)
-        self.color = sugar.profile.get_color()
-##        self.icon = CanvasIcon(
-##            icon_name = 'theme:stock-buddy',
-##            xo_color = XoColor(self.color))     
+        self.color = sugar3.profile.get_color()
 
         self.layout = CalcLayout(self)
         self.label_entry = self.layout.label_entry
@@ -474,8 +484,8 @@ class Calculate(ShareableActivity):
                 res = RuntimeError(_('Can not assign label: will cause recursion'),
                         lastpos)
 
-# If parsing went ok, see if we have to replace the previous answer
-# to get a (more) exact result
+        # If parsing went ok, see if we have to replace the previous answer
+        # to get a (more) exact result
         if self.ans_inserted and not isinstance(res, ParserError) \
                 and not isinstance(res, SVGImage):
             ansvar = self.format_insert_ans()
@@ -508,21 +518,37 @@ class Calculate(ShareableActivity):
         return res is not None
 
     def create_var_textview(self, name, value):
-        """Create a gtk.TextView for a variable"""
+        """Create a Gtk.TextView for a variable"""
 
         reserved = ["Ans", "LastEqn", "help"]
         if name in reserved:
             return None
-        w = gtk.TextView()
+        w = Gtk.TextView()
+        w.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_fill_color()))
+        w.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(self.color.get_stroke_color()))
+        w.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
+        w.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        w.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        w.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
         w.connect('realize', _textview_realize_cb)
-        w.set_left_margin(5)
-        w.set_right_margin(5)
         buf = w.get_buffer()
 
-        col = self.color.get_fill_color()
+        bright = (Gdk.color_parse(self.color.get_fill_color()).red_float +
+                  Gdk.color_parse(self.color.get_fill_color()).green_float +
+                  Gdk.color_parse(self.color.get_fill_color()).blue_float) / 3.0
+        if bright < 0.5:
+            col = Gdk.color_parse('white')
+        else:
+            col = Gdk.color_parse('black')
+
         tag = buf.create_tag(font=CalcLayout.FONT_SMALL_NARROW,
                 foreground=col)
-        text = '%s:\t%s' % (name,str(value))
+        text = '%s:' % (name)
+        buf.insert_with_tags(buf.get_end_iter(), text, tag)
+        tag = buf.create_tag(font=CalcLayout.FONT_SMALL,
+                foreground=col)
+        text = '%s' % (str(value))
         buf.insert_with_tags(buf.get_end_iter(), text, tag)
 
         return w
@@ -536,9 +562,9 @@ class Calculate(ShareableActivity):
         self.clear()
         return True
 
-##########################################
-# Journal functions
-##########################################
+    ##########################################
+    # Journal functions
+    ##########################################
 
     def write_file(self, file_path):
         """Write journal entries, Calculate Journal Version (cjv) 1.0"""
@@ -554,7 +580,7 @@ class Calculate(ShareableActivity):
             sel = (pos, pos)
             f.write("%s;%d;%d;%d\n" % (self.text_entry.get_text(), pos, sel[0], sel[1]))
 
-# In reverse order
+        # In reverse order
         for eq in self.old_eqs:
             f.write(str(eq))
 
@@ -597,9 +623,9 @@ class Calculate(ShareableActivity):
             _logger.error('Unable to read journal entry, unknown version (%s)', version)
             return False
 
-##########################################
-# User interaction functions
-##########################################
+    ##########################################
+    # User interaction functions
+    ##########################################
 
     def remove_character(self, dir):
         pos = self.text_entry.get_position()
@@ -609,20 +635,30 @@ class Calculate(ShareableActivity):
             if pos + dir <= len(self.text_entry.get_text()) and pos + dir >= 0:
                 if dir < 0:
                     self.text_entry.delete_text(pos+dir, pos)
+                    pos -= 1
                 else:
                     self.text_entry.delete_text(pos, pos+dir)
+                    pos += 1
         else:
             self.text_entry.delete_text(sel[0], sel[1])
+        self.text_entry.grab_focus()
+        self.text_entry.set_position(pos) 
 
     def move_left(self):
         pos = self.text_entry.get_position()
         if pos > 0:
-            self.text_entry.set_position(pos - 1)
+            pos -= 1
+            self.text_entry.set_position(pos)
+        self.text_entry.grab_focus()
+        self.text_entry.set_position(pos) 
 
     def move_right(self):
         pos = self.text_entry.get_position()
         if pos < len(self.text_entry.get_text()):
-            self.text_entry.set_position(pos + 1)
+            pos += 1
+            self.text_entry.set_position(pos)
+        self.text_entry.grab_focus()
+        self.text_entry.set_position(pos) 
 
     def label_entered(self):
         if len(self.label_entry.get_text()) > 0:
@@ -634,7 +670,7 @@ class Calculate(ShareableActivity):
 
     def tab_complete(self):
 
-# Get start of variable name
+        # Get start of variable name
         str = self.text_entry.get_text()
         if len(str) == 0:
             return
@@ -652,17 +688,17 @@ class Calculate(ShareableActivity):
         partial_name = str[start_ofs:end_ofs]
         _logger.debug('tab-completing %s...', partial_name)
 
-# Lookup matching variables
+        # Lookup matching variables
         vars = self.parser.get_names(start=partial_name)
         if len(vars) == 0:
             return False
 
-# Nothing selected, select first match
+        # Nothing selected, select first match
         if len(sel) == 0:
             name = vars[0]
             self.text_entry.set_text(str[:start_ofs] + name + str[end_ofs:])
 
-# Select next matching variable
+        # Select next matching variable
         else:
             full_name = str[start_ofs:sel[1]]
             if full_name not in vars:
@@ -676,10 +712,10 @@ class Calculate(ShareableActivity):
         self.select_reason = self.SELECT_TAB
         return True
 
-# Selection related functions
+    # Selection related functions
 
     def expand_selection(self, dir):
-#        _logger.info('Expanding selection in dir %d', dir)
+        #_logger.info('Expanding selection in dir %d', dir)
         sel = self.text_entry.get_selection_bounds()
         slen = len(self.text_entry.get_text())
         pos = self.text_entry.get_position()
@@ -687,7 +723,8 @@ class Calculate(ShareableActivity):
             sel = (pos, pos)
         if dir < 0:
             newpos = max(0, sel[0] + dir)
-            self.text_entry.set_position(newpos)   # apparently no such thing as a cursor position during select
+            # apparently no such thing as a cursor position during select
+            self.text_entry.set_position(newpos)
             self.text_entry.select_region(newpos, sel[1])
         elif dir > 0:
             newpos = min(sel[1] + dir, slen)
@@ -698,7 +735,7 @@ class Calculate(ShareableActivity):
     def text_copy(self):
         str = self.text_entry.get_text()
         sel = self.text_entry.get_selection_bounds()
- #       _logger.info('text_copy, sel: %r, str: %s', sel, str)
+        #_logger.info('text_copy, sel: %r, str: %s', sel, str)
         if len(sel) == 2:
             (start, end) = sel
             self.clipboard.set_text(str[start:end])
@@ -721,19 +758,19 @@ class Calculate(ShareableActivity):
         if not self.text_entry.is_focus():
             return
 
-        key = gtk.gdk.keyval_name(event.keyval)
+        key = Gdk.keyval_name(event.keyval)
         if event.hardware_keycode == 219:
-            if (event.state & gtk.gdk.SHIFT_MASK):
+            if (event.state & Gdk.SHIFT_MASK):
                 key = 'divide'
             else:
                 key = 'multiply'
         _logger.debug('Key: %s (%r, %r)', key, event.keyval, event.hardware_keycode)
 
-        if event.state & gtk.gdk.CONTROL_MASK:
+        if event.state & Gdk.ModifierType.CONTROL_MASK:
             if self.CTRL_KEYMAP.has_key(key):
                 f = self.CTRL_KEYMAP[key]
                 return f(self)
-        elif (event.state & gtk.gdk.SHIFT_MASK) and self.SHIFT_KEYMAP.has_key(key):
+        elif (event.state & Gdk.ModifierType.SHIFT_MASK) and self.SHIFT_KEYMAP.has_key(key):
             f = self.SHIFT_KEYMAP[key]
             return f(self)
         elif unicode(key) in self.IDENTIFIER_CHARS:
@@ -765,12 +802,12 @@ class Calculate(ShareableActivity):
     def add_text(self, input_str):
         self.button_pressed(self.TYPE_TEXT, input_str)
 
-# This function should be split up properly
+    # This function should be split up properly
     def button_pressed(self, str_type, input_str):
         sel = self.text_entry.get_selection_bounds()
         pos = self.text_entry.get_position()
 
-# If selection by tab completion just manipulate end
+        # If selection by tab completion just manipulate end
         if len(sel) == 2 and self.select_reason != self.SELECT_SELECT:
             pos = sel[1]
             sel = ()
@@ -862,9 +899,9 @@ class Calculate(ShareableActivity):
             return ''
 
 def main():
-    win = gtk.Window(gtk.WINDOW_TOPLEVEL)
+    win = Gtk.Window(Gtk.WindowType.TOPLEVEL)
     t = Calculate(win)
-    gtk.main()
+    Gtk.main()
     return 0
 
 if __name__ == "__main__":
diff --git a/layout.py b/layout.py
index b53efc1..c967527 100644
--- a/layout.py
+++ b/layout.py
@@ -1,20 +1,22 @@
 # layout.py, see calculate.py for info
 
 from gettext import gettext as _
-import pygtk
-pygtk.require('2.0')
-import gtk
-import pango
-from sugar.activity import activity
-from sugar.graphics.roundbox import CanvasRoundBox
-from toolbars import *
 
-try:
-    from sugar.graphics.toolbarbox import ToolbarButton, ToolbarBox
-    from sugar.activity.widgets import ActivityToolbarButton
-    from sugar.activity.widgets import StopButton
-except ImportError:
-    pass
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+from gi.repository import Gdk
+from gi.repository import Pango
+
+from sugar3.activity import activity
+import sugar3.profile
+#from sugar3.graphics.roundbox import CanvasRoundBox
+from sugar3.graphics.combobox import ComboBox
+from sugar3.graphics.toolbarbox import ToolbarButton, ToolbarBox
+from sugar3.activity.widgets import ActivityToolbarButton
+from sugar3.activity.widgets import StopButton
+
+from toolbars import *
 
 class CalcLayout:
 
@@ -39,7 +41,7 @@ class CalcLayout:
         self.create_dialog()
 
     def create_color(self, rf, gf, bf):
-        return gtk.gdk.Color(int(rf*0xFFFF), int(gf*0xFFFF), int(bf*0xFFFF))
+        return Gdk.Color(int(rf*0xFFFF), int(gf*0xFFFF), int(bf*0xFFFF))
 
     def create_button_data(self):
         """Create a list with button information. We need to do that here
@@ -50,189 +52,214 @@ class CalcLayout:
         equ_sym = self._parent.ml.equ_sym
 
         self.button_data = [
-# [x, y, width, label, bgcol, cb]
-            [0, 0, 1, '7', self.col_gray2, lambda w: self._parent.add_text('7')],
-            [1, 0, 1, '8', self.col_gray2, lambda w: self._parent.add_text('8')],
-            [2, 0, 1, '9', self.col_gray2, lambda w: self._parent.add_text('9')],
+            # [x, y, width, label, bgcol, cb]
+            [0, 0, 2, 1, u'\u2190', self.col_gray3, lambda w: self._parent.move_left()],
+            [2, 0, 2, 1, u'\u2192', self.col_gray3, lambda w: self._parent.move_right()],
+            [4, 0, 2, 1, u'\u232B', self.col_gray3, lambda w: self._parent.remove_character(-1)],
+
+            [0, 1, 1, 2, '7', self.col_gray2, lambda w: self._parent.add_text('7')],
+            [1, 1, 1, 2, '8', self.col_gray2, lambda w: self._parent.add_text('8')],
+            [2, 1, 1, 2, '9', self.col_gray2, lambda w: self._parent.add_text('9')],
       
-            [0, 1, 1, '4', self.col_gray2, lambda w: self._parent.add_text('4')],
-            [1, 1, 1, '5', self.col_gray2, lambda w: self._parent.add_text('5')],
-            [2, 1, 1, '6', self.col_gray2, lambda w: self._parent.add_text('6')],
+            [0, 3, 1, 2, '4', self.col_gray2, lambda w: self._parent.add_text('4')],
+            [1, 3, 1, 2, '5', self.col_gray2, lambda w: self._parent.add_text('5')],
+            [2, 3, 1, 2, '6', self.col_gray2, lambda w: self._parent.add_text('6')],
       
-            [0, 2, 1, '1', self.col_gray2, lambda w: self._parent.add_text('1')],
-            [1, 2, 1, '2', self.col_gray2, lambda w: self._parent.add_text('2')],
-            [2, 2, 1, '3', self.col_gray2, lambda w: self._parent.add_text('3')],
+            [0, 5, 1, 2, '1', self.col_gray2, lambda w: self._parent.add_text('1')],
+            [1, 5, 1, 2, '2', self.col_gray2, lambda w: self._parent.add_text('2')],
+            [2, 5, 1, 2, '3', self.col_gray2, lambda w: self._parent.add_text('3')],
       
-            [0, 3, 1, '0', self.col_gray2, lambda w: self._parent.add_text('0')],
-            [1, 3, 1, '.', self.col_gray2, lambda w: self._parent.add_text('.')],
+            [0, 7, 2, 2, '0', self.col_gray2, lambda w: self._parent.add_text('0')],
+            [2, 7, 1, 2, '.', self.col_gray2, lambda w: self._parent.add_text('.')],
 
-            [3, 0, 3, _('Clear'), self.col_gray1, lambda w: self._parent.clear()],
+            [3, 1, 3, 2, _('Clear'), self.col_gray1, lambda w: self._parent.clear()],
  
-            [3, 1, 1, '+', self.col_gray3, lambda w: self._parent.add_text('+')],
-            [4, 1, 1, '-', self.col_gray3, lambda w: self._parent.add_text('-')],
-            [5, 1, 1, '(', self.col_gray3, lambda w: self._parent.add_text('(')],
-            [3, 2, 1, mul_sym, self.col_gray3, lambda w: self._parent.add_text(mul_sym)],
-            [4, 2, 1, div_sym, self.col_gray3, lambda w: self._parent.add_text(div_sym)],
-            [5, 2, 1, ')', self.col_gray3, lambda w: self._parent.add_text(')')],
-
-            [3, 3, 3, equ_sym, self.col_gray1, lambda w: self._parent.process()],
+            [3, 3, 1, 2, '+', self.col_gray3, lambda w: self._parent.add_text('+')],
+            [4, 3, 1, 2, '-', self.col_gray3, lambda w: self._parent.add_text('-')],
+            [5, 3, 1, 2, '(', self.col_gray3, lambda w: self._parent.add_text('(')],
+            [3, 5, 1, 2, mul_sym, self.col_gray3, lambda w: self._parent.add_text(mul_sym)],
+            [4, 5, 1, 2, div_sym, self.col_gray3, lambda w: self._parent.add_text(div_sym)],
+            [5, 5, 1, 2, ')', self.col_gray3, lambda w: self._parent.add_text(')')],
+
+            [3, 7, 3, 2, equ_sym, self.col_gray1, lambda w: self._parent.process()],
         ]
 
     def create_dialog(self):
         """Setup most of the dialog."""
 
-# Toolbar
-        try:
-            toolbar_box = ToolbarBox()
+        # Toolbar
+        toolbar_box = ToolbarBox()
 
-            activity_button = ActivityToolbarButton(self._parent)
-            toolbar_box.toolbar.insert(activity_button, 0)
+        activity_button = ActivityToolbarButton(self._parent)
+        toolbar_box.toolbar.insert(activity_button, 0)
             
-            def append(icon_name, label, page, position):
-                toolbar_button = ToolbarButton()
-                toolbar_button.props.page = page
-                toolbar_button.props.icon_name = icon_name
-                toolbar_button.props.label = label
-                toolbar_box.toolbar.insert(toolbar_button, position)
-
-            append('toolbar-edit',
-                   _('Edit'),
-                   EditToolbar(self._parent),
-                   -1)
+        def append(icon_name, label, page, position):
+            toolbar_button = ToolbarButton()
+            toolbar_button.props.page = page
+            toolbar_button.props.icon_name = icon_name
+            toolbar_button.props.label = label
+            toolbar_box.toolbar.insert(toolbar_button, position)
+
+        append('toolbar-edit',
+               _('Edit'),
+               EditToolbar(self._parent),
+               -1)
                                   
-            append('toolbar-algebra',
-                   _('Algebra'),
-                   AlgebraToolbar(self._parent),
-                   -1)
+        append('toolbar-algebra',
+               _('Algebra'),
+               AlgebraToolbar(self._parent),
+               -1)
             
-            append('toolbar-trigonometry',
-                   _('Trigonometry'),
-                   TrigonometryToolbar(self._parent),
-                   -1)
-
-            append('toolbar-boolean',
-                   _('Boolean'),
-                   BooleanToolbar(self._parent),
-                   -1)
-
-            append('toolbar-constants',
-                   _('Miscellaneous'),
-                   MiscToolbar(self._parent, target_toolbar=toolbar_box.toolbar),
-                   5)
+        append('toolbar-trigonometry',
+               _('Trigonometry'),
+               TrigonometryToolbar(self._parent),
+               -1)
+
+        append('toolbar-boolean',
+               _('Boolean'),
+               BooleanToolbar(self._parent),
+               -1)
+
+        append('toolbar-constants',
+               _('Miscellaneous'),
+               MiscToolbar(self._parent, target_toolbar=toolbar_box.toolbar),
+               5)
             
-            separator = gtk.SeparatorToolItem()
-            separator.props.draw = False
-            separator.set_expand(True)
-            separator.show()
-            toolbar_box.toolbar.insert(separator, -1)
-
-            stop = StopButton(self._parent)
-            toolbar_box.toolbar.insert(stop, -1)
-
-            toolbar_box.show_all()
-            self._parent.set_toolbar_box(toolbar_box)
-
-        except NameError:
-            # Use old toolbar design
-            toolbox = activity.ActivityToolbox(self._parent)
-            self._parent.set_toolbox(toolbox)
-            toolbox.add_toolbar(_('Edit'), EditToolbar(self._parent))
-            toolbox.add_toolbar(_('Algebra'), AlgebraToolbar(self._parent))
-            toolbox.add_toolbar(_('Trigonometry'), TrigonometryToolbar(self._parent))
-            toolbox.add_toolbar(_('Boolean'), BooleanToolbar(self._parent))
-            toolbox.add_toolbar(_('Miscellaneous'), MiscToolbar(self._parent))
-            toolbox.show_all()
-
-# Some layout constants
-        self.input_font = pango.FontDescription(str='sans bold 12')
-        self.button_font = pango.FontDescription(str='sans bold 16')
+        separator = Gtk.SeparatorToolItem()
+        separator.props.draw = False
+        separator.set_expand(True)
+        separator.show()
+        toolbar_box.toolbar.insert(separator, -1)
+
+        stop = StopButton(self._parent)
+        toolbar_box.toolbar.insert(stop, -1)
+
+        toolbar_box.show_all()
+        self._parent.set_toolbar_box(toolbar_box)
+
+        # Some layout constants
+        self.input_font = Pango.FontDescription('sans bold 12')
+        self.button_font = Pango.FontDescription('sans bold 16')
         self.col_white = self.create_color(1.00, 1.00, 1.00)
-        self.col_gray1 = self.create_color(0.69, 0.71, 0.72)
-        self.col_gray2 = self.create_color(0.51, 0.51, 0.53)
-        self.col_gray3 = self.create_color(0.30, 0.30, 0.31)
+        self.col_gray1 = self.create_color(0.76, 0.76, 0.76)
+        self.col_gray2 = self.create_color(0.50, 0.50, 0.50)
+        self.col_gray3 = self.create_color(0.25, 0.25, 0.25)
         self.col_black = self.create_color(0.00, 0.00, 0.00)
         self.col_red = self.create_color(1.00, 0.00, 0.00)
 
-# Big - Table, 16 rows, 10 columns, homogeneously divided
-        self.grid = gtk.Table(16, 11, True)
-        self.grid.set_border_width(6)
-        self.grid.set_row_spacings(6)
-        self.grid.set_col_spacings(6)
-
-# Left part: container and input
-        hc1 = gtk.HBox(False, 10)
-        label1 = gtk.Label(_('Label:'))
-        hc1.add(label1)
-        self.label_entry = gtk.Entry()
-        hc1.add(self.label_entry)
-        self.grid.attach(hc1, 0, 6, 0, 1)
+        # Big - Table, 16 rows, 10 columns, homogeneously divided
+        self.grid = Gtk.Table(26, 11, True)
+        self.grid.set_border_width(0)
+        self.grid.set_row_spacings(0)
+        self.grid.set_col_spacings(4)
+
+        # Left part: container and input
+        vc1 = Gtk.VBox(False, 0)
+        hc1 = Gtk.HBox(False, 10)
+        eb = Gtk.EventBox()
+        eb.add(hc1)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        eb.set_border_width(12)
+        eb2 = Gtk.EventBox()
+        eb2.add(eb)
+        eb2.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        label1 = Gtk.Label(_('Label:'))
+        label1.modify_fg(Gtk.StateType.NORMAL, self.col_white)
+        label1.set_alignment(1, 0.5)
+        hc1.pack_start(label1, expand=False, fill=False, padding=10)
+        self.label_entry = Gtk.Entry()
+        self.label_entry.modify_bg(Gtk.StateType.INSENSITIVE, self.col_black)
+        hc1.pack_start(self.label_entry, expand=True, fill=True, padding=0)
+        vc1.pack_start(eb2, expand=False, fill=True, padding=0)
         
-        self.text_entry = gtk.Entry()
-        self.text_entry.set_size_request(400, 100)
+        self.text_entry = Gtk.Entry()
+        self.text_entry.props.im_module = 'gtk-im-context-simple'
+        self.text_entry.set_size_request(-1, 75)
         self.text_entry.connect('key_press_event', self._parent.ignore_key_cb)
         self.text_entry.modify_font(self.input_font)
-        self.grid.attach(self.text_entry, 0, 6, 1, 5)
-
-# Left part: buttons
-        self.pad = gtk.Table(4, 6, True)
-        self.pad.set_row_spacings(6)
-        self.pad.set_col_spacings(6)
+        self.text_entry.modify_bg(Gtk.StateType.INSENSITIVE, self.col_black)
+        eb = Gtk.EventBox()
+        eb.add(self.text_entry)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        eb.set_border_width(12)
+        eb2 = Gtk.EventBox()
+        eb2.add(eb)
+        eb2.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        vc1.pack_start(eb2, expand=True, fill=True, padding=0)
+        self.grid.attach(vc1, 0, 7, 0, 6)
+
+        # Left part: buttons
+        self.pad = Gtk.Table(9, 6, True)
+        self.pad.set_row_spacings(12)
+        self.pad.set_col_spacings(12)
+        self.pad.set_border_width(12)
         self.create_button_data()
         self.buttons = {}
-        for x, y, w, cap, bgcol, cb in self.button_data:
-            button = self.create_button(_(cap), cb, self.col_white, bgcol, w)
+        for x, y, w, h, cap, bgcol, cb in self.button_data:
+            button = self.create_button(_(cap), cb, self.col_white, bgcol, w, h)
             self.buttons[cap] = button
-            self.pad.attach(button, x, x+w, y, y+1)
-
-# Not for now...
-#        self.pad_ebox = gtk.EventBox()
-#        self.pad_ebox.add(self.pad)
-#        self.pad_ebox.modify_bg(gtk.STATE_NORMAL, self.col_black)
-
-        self.grid.attach(self.pad, 0, 6, 5, 16)
-
-# Right part: container and equation button
-        hc2 = gtk.HBox()
-        self.minebut = TextToggleToolButton(
-            [_('All equations'), _('My equations')],
-            self._all_equations_toggle_cb,
-            _('Change view between own and all equations'),
-            index=True)
-        self.varbut = TextToggleToolButton(
-            [_('Show history'), _('Show variables')],
-            self._history_toggle_cb,
-            _('Change view between history and variables'),
-            index=True)
-        hc2.add(self.minebut)
-        hc2.add(self.varbut)
-        self.grid.attach(hc2, 6, 11, 0, 1)
+            self.pad.attach(button, x, x + w, y, y + h)
+
+        eb = Gtk.EventBox()
+        eb.add(self.pad)
+        eb.modify_bg(Gtk.StateType.NORMAL, self.col_black)
+        self.grid.attach(eb, 0, 7, 6, 26)
+
+        # Right part: container and equation button
+        hc2 = Gtk.HBox()
+        combo = ComboBox()
+        combo.append_item(0, _('All equations'))
+        combo.append_item(1, _('My equations'))
+        combo.append_item(2, _('Show variables'))
+        combo.set_active(0)
+        combo.connect('changed', self._history_filter_cb)
+        hc2.pack_start(combo, expand=True, fill=True, padding=0) 
+        hc2.set_border_width(6)
+        self.grid.attach(hc2, 7, 11, 0, 2)
         
-# Right part: last equation
-        self.last_eq = gtk.TextView()
+        # Right part: last equation
+        self.last_eq = Gtk.TextView()
         self.last_eq.set_editable(False)
-        self.last_eq.set_wrap_mode(gtk.WRAP_WORD)
+        self.last_eq.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
         self.last_eq.connect('realize', self._textview_realize_cb)
-        self.grid.attach(self.last_eq, 6, 11, 1, 5)
+        self.last_eq.modify_base(Gtk.StateType.NORMAL, Gdk.color_parse(
+                                 sugar3.profile.get_color().get_fill_color()))
+        self.last_eq.modify_bg(Gtk.StateType.NORMAL, Gdk.color_parse(
+                                 sugar3.profile.get_color().get_stroke_color()))
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.LEFT, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.RIGHT, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.TOP, 4)
+        self.last_eq.set_border_window_size(Gtk.TextWindowType.BOTTOM, 4)
+
+        bright = (Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).red_float +
+                  Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).green_float +
+                  Gdk.color_parse(sugar3.profile.get_color().get_fill_color()).blue_float) / 3.0
+        if bright < 0.5:
+            self.last_eq.modify_text(Gtk.StateType.NORMAL, self.col_white)
+        else:
+            self.last_eq.modify_text(Gtk.StateType.NORMAL, self.col_black)
+
+        self.grid.attach(self.last_eq, 7, 11, 2, 7)
 
-# Right part: history
-        scrolled_window = gtk.ScrolledWindow()
-        scrolled_window.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
+        # Right part: history
+        scrolled_window = Gtk.ScrolledWindow()
+        scrolled_window.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
 
-        self.history_vbox = gtk.VBox()
+        self.history_vbox = Gtk.VBox()
         self.history_vbox.set_homogeneous(False)
-        self.history_vbox.set_border_width(6)
+        self.history_vbox.set_border_width(0)
         self.history_vbox.set_spacing(4)
 
-        self.variable_vbox = gtk.VBox()
+        self.variable_vbox = Gtk.VBox()
         self.variable_vbox.set_homogeneous(False)
-        self.variable_vbox.set_border_width(6)
+        self.variable_vbox.set_border_width(0)
         self.variable_vbox.set_spacing(4)
 
-        vbox = gtk.VBox()
-        vbox.pack_start(self.history_vbox)
-        vbox.pack_start(self.variable_vbox)
+        vbox = Gtk.VBox()
+        vbox.pack_start(self.history_vbox, expand=True, fill=True, padding=0)
+        vbox.pack_start(self.variable_vbox, expand=True, fill=True, padding=0)
         scrolled_window.add_with_viewport(vbox)
-        self.grid.attach(scrolled_window, 6, 11, 5, 16)
+        self.grid.attach(scrolled_window, 7, 11, 7, 26)
 
     def show_it(self):
         """Show the dialog."""
@@ -253,13 +280,13 @@ class CalcLayout:
         self.history_vbox.show()
 
     def add_equation(self, textview, own, prepend=False):
-        """Add a gtk.TextView of an equation to the history_vbox."""
+        """Add a Gtk.TextView of an equation to the history_vbox."""
 
         if prepend:
-            self.history_vbox.pack_start(textview, False, True)
+            self.history_vbox.pack_start(textview, False, True, 0)
             self.history_vbox.reorder_child(textview, 0)
         else:
-            self.history_vbox.pack_end(textview, False, True)
+            self.history_vbox.pack_end(textview, False, True,0 )
 
         if own:
             self._own_equations.append(textview)
@@ -282,14 +309,14 @@ class CalcLayout:
             key.hide()
 
     def add_variable(self, varname, textview):
-        """Add a gtk.TextView of a variable to the variable_vbox."""
+        """Add a Gtk.TextView of a variable to the variable_vbox."""
 
         if varname in self._var_textviews:
             self.variable_vbox.remove(self._var_textviews[varname])
             del self._var_textviews[varname]
 
         self._var_textviews[varname] = textview
-        self.variable_vbox.pack_start(textview, False, True)
+        self.variable_vbox.pack_start(textview, False, True, 0)
 
         # Reorder textviews for a sorted list
         names = self._var_textviews.keys()
@@ -305,37 +332,38 @@ class CalcLayout:
         self.history_vbox.hide()
         self.variable_vbox.show()
 
-    def create_button(self, cap, cb, fgcol, bgcol, width):
+    def create_button(self, cap, cb, fgcol, bgcol, width, height):
         """Create a button that is set up properly."""
-        button = gtk.Button(_(cap))
-        self.modify_button_appearance(button, fgcol, bgcol, width)
+        button = Gtk.Button(_(cap))
+        self.modify_button_appearance(button, fgcol, bgcol, width, height)
         button.connect("clicked", cb)
         button.connect("key_press_event", self._parent.ignore_key_cb)
         return button
 
-    def modify_button_appearance(self, button, fgcol, bgcol, width):
+    def modify_button_appearance(self, button, fgcol, bgcol, width, height):
         """Modify button style."""
         width = 50 * width
-        button.get_child().set_size_request(width, 50)
+        height = 50 * height
+        button.get_child().set_size_request(width, height)
         button.get_child().modify_font(self.button_font)
-        button.get_child().modify_fg(gtk.STATE_NORMAL, fgcol)
-        button.modify_bg(gtk.STATE_NORMAL, bgcol)
+        button.get_child().modify_fg(Gtk.StateType.NORMAL, fgcol)
+        button.modify_bg(Gtk.StateType.NORMAL, bgcol)
+        button.modify_bg(Gtk.StateType.PRELIGHT, bgcol)
 
-    def _all_equations_toggle_cb(self, index):
-        if index == 0:
+    def _history_filter_cb(self, combo):
+        selection = combo.get_active()
+        if selection == 0:
+            self.show_history()
             self.show_all_history()
-        else:
-            self.show_own_history()
-
-    def _history_toggle_cb(self, index):
-        if index == 0:
+        elif selection == 1:
             self.show_history()
-        else:
+            self.show_own_history()
+        elif selection == 2:
             self.show_variables()
 
     def _textview_realize_cb(self, widget):
         '''Change textview properties once window is created.'''
-        win = widget.get_window(gtk.TEXT_WINDOW_TEXT)
-        win.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))
+        win = widget.get_window(Gtk.TextWindowType.TEXT)
+        win.set_cursor(Gdk.Cursor(Gdk.CursorType.HAND1))
         return False
 
diff --git a/plotlib.py b/plotlib.py
index d6527b9..4d54395 100644
--- a/plotlib.py
+++ b/plotlib.py
@@ -154,7 +154,7 @@ class CustomPlot(_PlotBase):
             self.maxy = max(float(y), self.maxy)
 
         if self.minx == self.maxx:
-            xYspace = 0.5
+            x_space = 0.5
         else:
             x_space = 0.02 * (self.maxx - self.minx)
         self.minx -= x_space
diff --git a/setup.py b/setup.py
index ec0f64e..9a141b3 100755
--- a/setup.py
+++ b/setup.py
@@ -1,3 +1,3 @@
 #!/usr/bin/env python
-from sugar.activity import bundlebuilder
+from sugar3.activity import bundlebuilder
 bundlebuilder.start()
diff --git a/shareable_activity.py b/shareable_activity.py
index c418666..b749765 100644
--- a/shareable_activity.py
+++ b/shareable_activity.py
@@ -3,9 +3,9 @@ from dbus import Interface
 from dbus.service import method, signal
 import telepathy
 
-from sugar.activity import activity
-from sugar.presence import presenceservice
-from sugar.presence.sugartubeconn import SugarTubeConnection
+from sugar3.activity import activity
+from sugar3.presence import presenceservice
+from sugar3.presence.sugartubeconn import SugarTubeConnection
 
 import logging
 _logger = logging.getLogger('ShareableActivity')
diff --git a/svgimage.py b/svgimage.py
index 5469107..ca297e8 100644
--- a/svgimage.py
+++ b/svgimage.py
@@ -20,8 +20,8 @@
 import logging
 _logger = logging.getLogger('SVGImage')
 
-import gtk
-import rsvg
+from gi.repository import Gtk
+from gi.repository import Rsvg
 
 class SVGImage:
 
@@ -38,9 +38,9 @@ class SVGImage:
         return self._svg_data
 
     def render_svg(self):
-        self._handle = rsvg.Handle(data=self._svg_data)
+        self._handle = Rsvg.Handle.new_from_data(self._svg_data)
         self._pixbuf = self._handle.get_pixbuf()
-        self._image = gtk.Image()
+        self._image = Gtk.Image()
         self._image.set_from_pixbuf(self._pixbuf)
         self._image.set_alignment(0.5, 0)
         return self._image
diff --git a/toolbars.py b/toolbars.py
index 9240395..4fed000 100644
--- a/toolbars.py
+++ b/toolbars.py
@@ -1,15 +1,16 @@
 # -*- coding: UTF-8 -*-
 # toolbars.py, see CalcActivity.py for info
 
-import pygtk
-pygtk.require('2.0')
-import gtk
+#import pygtk
+#pygtk.require('2.0')
+from gi.repository import Gtk
+
 from mathlib import MathLib
 
-from sugar.graphics.palette import Palette
-from sugar.graphics.menuitem import MenuItem
-from sugar.graphics.toolbutton import ToolButton
-from sugar.graphics.toggletoolbutton import ToggleToolButton
+from sugar3.graphics.palette import Palette
+from sugar3.graphics.menuitem import MenuItem
+from sugar3.graphics.toolbutton import ToolButton
+from sugar3.graphics.toggletoolbutton import ToggleToolButton
 
 import logging
 _logger = logging.getLogger('calc-activity')
@@ -20,7 +21,7 @@ def _icon_exists(name):
     if name == '':
         return False
 
-    theme = gtk.icon_theme_get_default()
+    theme = Gtk.IconTheme.get_default()
     info = theme.lookup_icon(name, 0, 0)
     if info:
         return True
@@ -32,12 +33,13 @@ class IconToolButton(ToolButton):
         ToolButton.__init__(self)
 
         if _icon_exists(icon_name):
-            self.set_icon(icon_name)
+            #self.set_icon(icon_name)
+            self.props.icon_name = icon_name
         else:
             if alt_html == '':
                 alt_html = icon_name
 
-            label = gtk.Label()
+            label = Gtk.Label()
             label.set_markup(alt_html)
             label.show()
             self.set_label_widget(label)
@@ -63,7 +65,8 @@ class IconToggleToolButton(ToggleToolButton):
         ToggleToolButton.__init__(self)
         self.items = items
         if 'icon' in items[0] and _icon_exists(items[0]['icon']):
-            self.set_named_icon(items[0]['icon'])
+            #self.set_named_icon(items[0]['icon'])
+            self.props.icon_name = items[0]['icon']
         elif 'html' in items[0]:
             self.set_label(items[0]['html'])
 #        self.set_tooltip(items[0][1])
@@ -76,7 +79,8 @@ class IconToggleToolButton(ToggleToolButton):
         self.selected = (self.selected + 1) % len(self.items)
         but = self.items[self.selected]
         if 'icon' in but and _icon_exists(but['icon']):
-            self.set_named_icon(but['icon'])
+            #self.set_named_icon(but['icon'])
+            self.props.icon_name = but['icon']
         elif 'html' in but:
             _logger.info('Setting html: %s', but['html'])
             self.set_label(but['html'])
@@ -87,9 +91,9 @@ class IconToggleToolButton(ToggleToolButton):
             else:
                 self.callback(but)
 
-class TextToggleToolButton(gtk.ToggleToolButton):
+class TextToggleToolButton(Gtk.ToggleToolButton):
     def __init__(self, items, cb, desc, index=False):
-        gtk.ToggleToolButton.__init__(self)
+        Gtk.ToggleToolButton.__init__(self)
         self.items = items
         self.set_label(items[0])
         self.selected = 0
@@ -108,14 +112,14 @@ class TextToggleToolButton(gtk.ToggleToolButton):
             else:
                 self.callback(but)
 
-class LineSeparator(gtk.SeparatorToolItem):
+class LineSeparator(Gtk.SeparatorToolItem):
     def __init__(self):
-        gtk.SeparatorToolItem.__init__(self)
+        Gtk.SeparatorToolItem.__init__(self)
         self.set_draw(True)
 
-class EditToolbar(gtk.Toolbar):
+class EditToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         copy_tool = ToolButton('edit-copy')
         copy_tool.set_tooltip(_('Copy'))
@@ -140,9 +144,9 @@ class EditToolbar(gtk.Toolbar):
                         
         self.show_all()
 
-class AlgebraToolbar(gtk.Toolbar):
+class AlgebraToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('algebra-square', _('Square'),
             lambda x: calc.button_pressed(calc.TYPE_OP_POST, '**2'),
@@ -183,9 +187,9 @@ class AlgebraToolbar(gtk.Toolbar):
             
         self.show_all()
 
-class TrigonometryToolbar(gtk.Toolbar):
+class TrigonometryToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('trigonometry-sin', _('Sine'),
             lambda x: calc.button_pressed(calc.TYPE_FUNCTION, 'sin'),
@@ -229,9 +233,9 @@ class TrigonometryToolbar(gtk.Toolbar):
             
         self.show_all()
 
-class BooleanToolbar(gtk.Toolbar):
+class BooleanToolbar(Gtk.Toolbar):
     def __init__(self, calc):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('boolean-and', _('Logical and'),
             lambda x: calc.button_pressed(calc.TYPE_OP_POST, '&'),
@@ -255,9 +259,9 @@ class BooleanToolbar(gtk.Toolbar):
             
         self.show_all()
 
-class MiscToolbar(gtk.Toolbar):
+class MiscToolbar(Gtk.Toolbar):
     def __init__(self, calc, target_toolbar=None):
-        gtk.Toolbar.__init__(self)
+        Gtk.Toolbar.__init__(self)
 
         self.insert(IconToolButton('constants-pi', _('Pi'),
             lambda x: calc.button_pressed(calc.TYPE_TEXT, 'pi'),
