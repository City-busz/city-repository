diff --git a/ChangeLog b/ChangeLog
index b17fbbd..13b5071 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -120,3 +120,12 @@
 	  and html2txt, this has been tested on Debian-based systems
 	* urlwatch 1.15 released
 
+2012-09-13 Xavier Izard <ctrl.alt.sup@free.fr>
+	* Added basic support for email delivery, using internal SMTP lib.
+	  (see options --mailto, --mailfrom and --smtp)
+
+2013-03-11 Thomas Perl <thp.io/about>
+	* Minimalistic, automatic setup.py script (based on jabberbot)
+	* Move files around ({examples,urlwatch.1} -> share/...)
+	* Update Python 3 migration script and MANIFEST.in with new paths
+
diff --git a/convert-to-python3.sh b/convert-to-python3.sh
index 1ac8be6..86568ab 100755
--- a/convert-to-python3.sh
+++ b/convert-to-python3.sh
@@ -1,7 +1,7 @@
 #!/bin/sh
 # Convert urlwatch sources to Python 3.x compatible format
 
-SOURCES="urlwatch lib/urlwatch/*.py examples/hooks.py.example setup.py"
+SOURCES="urlwatch lib/urlwatch/*.py share/urlwatch/examples/hooks.py.example setup.py"
 
 2to3 -w $SOURCES
 
diff --git a/examples/hooks.py.example b/examples/hooks.py.example
deleted file mode 100644
index 4b5d380..0000000
--- a/examples/hooks.py.example
+++ /dev/null
@@ -1,89 +0,0 @@
-#
-# Example hooks file for urlwatch
-#
-# Copyright (c) 2008-2011 Thomas Perl <thp.io/about>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 1. Redistributions of source code must retain the above copyright
-#    notice, this list of conditions and the following disclaimer.
-# 2. Redistributions in binary form must reproduce the above copyright
-#    notice, this list of conditions and the following disclaimer in the
-#    documentation and/or other materials provided with the distribution.
-# 3. The name of the author may not be used to endorse or promote products
-#    derived from this software without specific prior written permission.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-
-
-# You can decide which filter you want to apply using the "url"
-# parameter and you can use the "re" module to search for the
-# content that you want to filter, so the noise is removed.
-
-
-# Needed for regular expression substitutions
-import re
-
-# Additional modules installed with urlwatch
-from urlwatch import ical2txt
-from urlwatch import html2txt
-
-
-def filter(url, data):
-    if url == 'http://www.inso.tuwien.ac.at/lectures/usability/':
-        return re.sub('.*TYPO3SEARCH_end.*', '', data)
-    elif url == 'https://www.auto.tuwien.ac.at/courses/viewDetails/11/':
-        return re.sub('</html><!-- \d+ -->', '', data)
-    elif url == 'http://grenzlandvagab.gr.funpic.de/events/':
-        return re.sub('<!-- Ad by .*by funpic.de -->', '', data)
-    elif url == 'http://www.mv-eberau.at/terminliste.php':
-        return data.replace('</br>', '\n')
-    elif 'iuner.lukas-krispel.at' in url:
-        # Remove always-changing entries from FTP server listing
-        return re.sub('drwx.*usage', '', re.sub('drwx.*logs', '', data))
-    elif url.startswith('http://ti.tuwien.ac.at/rts/teaching/courses/'):
-        # example of using the "tidy" module for cleaning up bad HTML
-        import tidy
-        mlr = re.compile('magicCalendarHeader.*magicCalendarBottom', re.S)
-        data = str(tidy.parseString(data, output_xhtml=1, indent=0, tidy_mark=0))
-        return re.sub(mlr, '', data)
-    elif url == 'http://www.poleros.at/calender.htm':
-        # remove style changes, because we only want to see content changes
-        return re.sub('style="[^"]"', '', data)
-    elif url == 'http://www.ads.tuwien.ac.at/teaching/LVA/186170.html':
-        return re.sub('Saved in parser cache with key .* and timestamp .* --', '', re.sub('Served by aragon in .* secs\.', '', re.sub('This page has been accessed .* times\.', '', data)))
-    elif url.endswith('.ics') or url == 'http://www.kukuk.at/ical/events':
-        # example of generating a summary for icalendar files
-        # append "data" to the converted ical data, so you get
-        # all minor changes to the ICS that are not included
-        # in the ical2text summary (remove this if you want)
-        return ical2txt.ical2text(data).encode('utf-8') + '\n\n' + data
-    elif url == 'http://www.oho.at/programm/programm.php3':
-        # example of converting HTML to plaintext for very
-        # ugly HTML code that cannot be deciphered when just
-        # diffing the HTML source (or if the user is just not
-        # used to HTML, use this for every web page)
-        #
-        # You need to install "lynx" for this to work or use
-        # "html2text" as method (needs "html2text") or use
-        # "re" (does not need anything, but only strips tags
-        # using a regular expression and does no formatting)
-        return html2txt.html2text(data, method='lynx')
-
-    # The next line is optional - if the filter function returns
-    # None (or no value at all), the input data will be taken as
-    # the result -> None as return value means "don't filter".
-    return data
-
diff --git a/examples/urls.txt.example b/examples/urls.txt.example
deleted file mode 100644
index c9bfe57..0000000
--- a/examples/urls.txt.example
+++ /dev/null
@@ -1,28 +0,0 @@
-
-# This is an example urls.txt file for urlwatch
-# Empty lines and lines starting with "#" are ignored
-
-http://www.dubclub-vienna.com/
-http://www.openpandora.org/developers.php
-#http://www.statistik.tuwien.ac.at/lv-guide/u107.369/info.html
-#http://www.statistik.tuwien.ac.at/lv-guide/u107.369/blatter.html
-#http://www.dbai.tuwien.ac.at/education/dbs/current/index.html
-#http://www.dbai.tuwien.ac.at/education/dbs/current/uebung.html
-http://ti.tuwien.ac.at/rts/teaching/courses/systems_programming
-http://ti.tuwien.ac.at/rts/teaching/courses/systems_programming/labor
-http://ti.tuwien.ac.at/rts/teaching/courses/betriebssysteme
-#http://www.complang.tuwien.ac.at/anton/lvas/effiziente-programme.html
-#http://www.complang.tuwien.ac.at/anton/lvas/effizienz-aufgabe08/
-http://www.kukuk.at/ical/events
-http://guckes.net/cal/
-
-# You can use the pipe character to "watch" the output of shell commands
-|ls -al ~
-
-# If you want to use spaces in URLs, you have to URL-encode them (e.g. %20)
-http://example.org/With%20Spaces/
-
-# You can do POST requests by writing the POST data behind the URL,
-# separated by a single space character. POST data is URL-encoded.
-http://example.com/search.cgi button=Search&q=something&category=4
-
diff --git a/lib/urlwatch/mailer.py b/lib/urlwatch/mailer.py
new file mode 100644
index 0000000..ff6adc3
--- /dev/null
+++ b/lib/urlwatch/mailer.py
@@ -0,0 +1,15 @@
+
+import smtplib
+from email.mime.text import MIMEText
+
+def send(smtp_server, from_email, to_email, subject, body):
+    msg = MIMEText(body, 'plain', 'utf_8')
+    msg['Subject'] = subject
+    msg['From'] = from_email
+    msg['To'] = to_email
+
+    s = smtplib.SMTP()
+    s.connect(smtp_server, 25)
+    s.sendmail(from_email, [to_email], msg.as_string())
+    s.quit()
+
diff --git a/setup.py b/setup.py
index b19e953..03aab2c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,71 +1,36 @@
 #!/usr/bin/python
-# Generic setup.py file (for urlwatch)
-#
-# Copyright (c) 2008-2011 Thomas Perl <thp.io/about>
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions
-# are met:
-# 1. Redistributions of source code must retain the above copyright
-#    notice, this list of conditions and the following disclaimer.
-# 2. Redistributions in binary form must reproduce the above copyright
-#    notice, this list of conditions and the following disclaimer in the
-#    documentation and/or other materials provided with the distribution.
-# 3. The name of the author may not be used to endorse or promote products
-#    derived from this software without specific prior written permission.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# -*- coding: utf-8 -*-
+# Minimalistic, automatic setup.py file for Python modules
+# Copyright (c) 2008-2013 Thomas Perl <thp.io/about>
 
+PACKAGE_NAME = 'urlwatch'
+
+# Assumptions:
+#  1. Package name equals main script file name (and only one script)
+#  2. Main script contains docstring + dunder-{author, license, url, version}
+#  3. Data files are in "share/", will be installed in $(PREFIX)/share
+#  4. Packages are in "lib/", no modules
 
 from distutils.core import setup
 
 import os
-import os.path
-import glob
-import imp
-
-# name of our package
-package = 'urlwatch'
+import re
 
-# name of the main script
-script = 'urlwatch'
+main_py = open(PACKAGE_NAME).read()
+m = dict(re.findall("\n__([a-z]+)__ = '([^']+)'", main_py))
+docs = re.findall('"""(.*?)"""', main_py, re.DOTALL)
 
-# get program info from urlwatch module
-s = imp.load_source('s', script)
-# remove compiled file created by imp.load_source
-os.unlink(script+'c')
+m['name'] = PACKAGE_NAME
+m['author'], m['author_email'] = re.match(r'(.*) <(.*)>', m['author']).groups()
+m['description'], m['long_description'] = docs[0].strip().split('\n\n', 1)
+m['download_url'] = m['url'] + PACKAGE_NAME + '-' + m['version'] + '.tar.gz'
 
-# s.__author__ has the format "Author Name <email>"
-author = s.__author__[:s.__author__.index('<')-1]
-author_email = s.__author__[s.__author__.index('<')+1:s.__author__.rindex('>')]
+m['scripts'] = [PACKAGE_NAME]
+m['package_dir'] = {'': 'lib'}
+m['packages'] = ['.'.join(dirname.split(os.sep)[1:])
+        for dirname, _, files in os.walk('lib') if '__init__.py' in files]
+m['data_files'] = [(dirname, [os.path.join(dirname, file) for file in files])
+        for dirname, _, files in os.walk('share')]
 
-setup(
-        name = s.pkgname,
-        description = s.__doc__,
-        version = s.__version__,
-        author = author,
-        author_email = author_email,
-        url = s.__homepage__,
-        scripts = [script],
-        package_dir = {'': 'lib'},
-        packages = [s.pkgname],
-        data_files = [
-            # Example files
-            (os.path.join('share', package, 'examples'),
-                glob.glob(os.path.join('examples', '*'))),
-            # Manual page
-            (os.path.join('share', 'man', 'man1'),
-                ['urlwatch.1']),
-        ],
-)
+setup(**m)
 
diff --git a/share/man/man1/urlwatch.1 b/share/man/man1/urlwatch.1
new file mode 100644
index 0000000..012b708
--- /dev/null
+++ b/share/man/man1/urlwatch.1
@@ -0,0 +1,72 @@
+.TH URLWATCH "1" "August 2012" "urlwatch 1.15" "User Commands"
+.SH NAME
+urlwatch \- Watch web pages and arbitrary URLs for changes
+.SH SYNOPSIS
+.B urlwatch
+[\fIoptions\fR]
+.SH DESCRIPTION
+urlwatch watches a list of URLs for changes and prints out unified
+diffs of the changes. You can filter always-changing parts of websites
+by providing a "hooks.py" script.
+.SH OPTIONS
+.TP
+\fB\-\-version\fR
+show program's version number and exit
+.TP
+\fB\-h\fR, \fB\-\-help\fR
+show the help message and exit
+.TP
+\fB\-v\fR, \fB\-\-verbose\fR
+Show debug/log output
+.TP
+\fB\-\-urls\fR=\fIFILE\fR
+Read URLs from the specified file
+.TP
+\fB\-\-hooks\fR=\fIFILE\fR
+Use specified file as hooks.py module
+.TP
+\fB\-e\fR, \fB\-\-display\-errors\fR
+Include HTTP errors (404, etc..) in the output
+.SH ADVANCED FEATURES
+urlwatch includes some advanced features that you have to activate by creating
+a hooks.py file that specifies for which URLs to use a specific feature. You
+can also use the hooks.py file to filter trivially-varying elements of a web
+page.
+.SS ICALENDAR FILE PARSING
+This module allows you to parse .ics files that are in iCalendar format and
+provide a very simplified text-based format for the diffs. Use it like this
+in your hooks.py file:
+
+  from urlwatch import ical2txt
+
+  def filter(url, data):
+      if url.endswith('.ics'):
+          return ical2txt.ical2text(data).encode('utf-8') + data
+      # ...you can add more hooks here...
+.SS HTML TO TEXT CONVERSION
+There are three methods of converting HTML to text in the current version of
+urlwatch: "lynx" (default), "html2text" and "re". The former two use
+command-line utilities of the same name to convert HTML to text, and the last
+one uses a simple regex-based tag stripping method (needs no extra tools).
+Here is an example of using it in your hooks.py file:
+
+  from urlwatch import html2txt
+
+  def filter(url, data):
+      if url.endswith('.html') or url.endswith('.htm'):
+          return html2txt.html2text(data, method='lynx')
+      # ...you can add more hooks here...
+.SH "FILES"
+.TP
+.B ~/.urlwatch/urls.txt
+A list of HTTP/FTP URLs to watch (one URL per line)
+.TP
+.B ~/.urlwatch/lib/hooks.py
+A Python module that can be used to filter contents
+.TP
+.B ~/.urlwatch/cache/
+The state of web pages is saved in this folder
+.SH AUTHOR
+Thomas Perl <thp.io/about>
+.SH WEBSITE
+http://thp.io/2008/urlwatch/
diff --git a/share/urlwatch/examples/hooks.py.example b/share/urlwatch/examples/hooks.py.example
new file mode 100644
index 0000000..4b5d380
--- /dev/null
+++ b/share/urlwatch/examples/hooks.py.example
@@ -0,0 +1,89 @@
+#
+# Example hooks file for urlwatch
+#
+# Copyright (c) 2008-2011 Thomas Perl <thp.io/about>
+# All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+# 3. The name of the author may not be used to endorse or promote products
+#    derived from this software without specific prior written permission.
+# 
+# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+
+
+# You can decide which filter you want to apply using the "url"
+# parameter and you can use the "re" module to search for the
+# content that you want to filter, so the noise is removed.
+
+
+# Needed for regular expression substitutions
+import re
+
+# Additional modules installed with urlwatch
+from urlwatch import ical2txt
+from urlwatch import html2txt
+
+
+def filter(url, data):
+    if url == 'http://www.inso.tuwien.ac.at/lectures/usability/':
+        return re.sub('.*TYPO3SEARCH_end.*', '', data)
+    elif url == 'https://www.auto.tuwien.ac.at/courses/viewDetails/11/':
+        return re.sub('</html><!-- \d+ -->', '', data)
+    elif url == 'http://grenzlandvagab.gr.funpic.de/events/':
+        return re.sub('<!-- Ad by .*by funpic.de -->', '', data)
+    elif url == 'http://www.mv-eberau.at/terminliste.php':
+        return data.replace('</br>', '\n')
+    elif 'iuner.lukas-krispel.at' in url:
+        # Remove always-changing entries from FTP server listing
+        return re.sub('drwx.*usage', '', re.sub('drwx.*logs', '', data))
+    elif url.startswith('http://ti.tuwien.ac.at/rts/teaching/courses/'):
+        # example of using the "tidy" module for cleaning up bad HTML
+        import tidy
+        mlr = re.compile('magicCalendarHeader.*magicCalendarBottom', re.S)
+        data = str(tidy.parseString(data, output_xhtml=1, indent=0, tidy_mark=0))
+        return re.sub(mlr, '', data)
+    elif url == 'http://www.poleros.at/calender.htm':
+        # remove style changes, because we only want to see content changes
+        return re.sub('style="[^"]"', '', data)
+    elif url == 'http://www.ads.tuwien.ac.at/teaching/LVA/186170.html':
+        return re.sub('Saved in parser cache with key .* and timestamp .* --', '', re.sub('Served by aragon in .* secs\.', '', re.sub('This page has been accessed .* times\.', '', data)))
+    elif url.endswith('.ics') or url == 'http://www.kukuk.at/ical/events':
+        # example of generating a summary for icalendar files
+        # append "data" to the converted ical data, so you get
+        # all minor changes to the ICS that are not included
+        # in the ical2text summary (remove this if you want)
+        return ical2txt.ical2text(data).encode('utf-8') + '\n\n' + data
+    elif url == 'http://www.oho.at/programm/programm.php3':
+        # example of converting HTML to plaintext for very
+        # ugly HTML code that cannot be deciphered when just
+        # diffing the HTML source (or if the user is just not
+        # used to HTML, use this for every web page)
+        #
+        # You need to install "lynx" for this to work or use
+        # "html2text" as method (needs "html2text") or use
+        # "re" (does not need anything, but only strips tags
+        # using a regular expression and does no formatting)
+        return html2txt.html2text(data, method='lynx')
+
+    # The next line is optional - if the filter function returns
+    # None (or no value at all), the input data will be taken as
+    # the result -> None as return value means "don't filter".
+    return data
+
diff --git a/share/urlwatch/examples/urls.txt.example b/share/urlwatch/examples/urls.txt.example
new file mode 100644
index 0000000..c9bfe57
--- /dev/null
+++ b/share/urlwatch/examples/urls.txt.example
@@ -0,0 +1,28 @@
+
+# This is an example urls.txt file for urlwatch
+# Empty lines and lines starting with "#" are ignored
+
+http://www.dubclub-vienna.com/
+http://www.openpandora.org/developers.php
+#http://www.statistik.tuwien.ac.at/lv-guide/u107.369/info.html
+#http://www.statistik.tuwien.ac.at/lv-guide/u107.369/blatter.html
+#http://www.dbai.tuwien.ac.at/education/dbs/current/index.html
+#http://www.dbai.tuwien.ac.at/education/dbs/current/uebung.html
+http://ti.tuwien.ac.at/rts/teaching/courses/systems_programming
+http://ti.tuwien.ac.at/rts/teaching/courses/systems_programming/labor
+http://ti.tuwien.ac.at/rts/teaching/courses/betriebssysteme
+#http://www.complang.tuwien.ac.at/anton/lvas/effiziente-programme.html
+#http://www.complang.tuwien.ac.at/anton/lvas/effizienz-aufgabe08/
+http://www.kukuk.at/ical/events
+http://guckes.net/cal/
+
+# You can use the pipe character to "watch" the output of shell commands
+|ls -al ~
+
+# If you want to use spaces in URLs, you have to URL-encode them (e.g. %20)
+http://example.org/With%20Spaces/
+
+# You can do POST requests by writing the POST data behind the URL,
+# separated by a single space character. POST data is URL-encoded.
+http://example.com/search.cgi button=Search&q=something&category=4
+
diff --git a/urlwatch b/urlwatch
index 088949f..f993f54 100755
--- a/urlwatch
+++ b/urlwatch
@@ -29,14 +29,19 @@
 # THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 
-"""Watch web pages and arbitrary URLs for changes"""
+"""Watch web pages and arbitrary URLs for changes
+
+This script is intended to help you watch URLs and get notified (via email or
+in your terminal) of any changes. The change notification will include the URL
+that has changed and a unified diff of what has changed.
+"""
 
 pkgname = 'urlwatch'
+COPYRIGHT = 'Copyright 2008-2013 Thomas Perl'
 
 __author__ = 'Thomas Perl <m@thp.io>'
-__copyright__ = 'Copyright 2008-2011 Thomas Perl'
 __license__ = 'BSD'
-__homepage__ = 'http://thp.io/2008/urlwatch/'
+__url__ = 'http://thp.io/2008/urlwatch/'
 __version__ = '1.15'
 
 user_agent = '%s/%s (+http://thp.io/2008/urlwatch/info.html)' % (pkgname, __version__)
@@ -60,12 +65,12 @@ hooks_py = os.path.join(scripts_dir, 'hooks.py')
 (prefix, bindir) = os.path.split(os.path.dirname(os.path.abspath(sys.argv[0])))
 
 if bindir == 'bin':
-    # Assume we are installed in system
+    # Installed system-wide
     examples_dir = os.path.join(prefix, 'share', pkgname, 'examples')
 else:
     # Assume we are not yet installed
-    examples_dir = os.path.join(prefix, bindir, 'examples')
-    sys.path.append(os.path.join(prefix, bindir, 'lib'))
+    sys.path.insert(0, os.path.join(prefix, bindir, 'lib'))
+    examples_dir = os.path.join(prefix, bindir, 'share', pkgname, 'examples')
 
 urls_txt_example = os.path.join(examples_dir, 'urls.txt.example')
 hooks_py_example = os.path.join(examples_dir, 'hooks.py.example')
@@ -91,6 +96,7 @@ import imp
 import concurrent.futures
 
 from urlwatch import handler
+from urlwatch import mailer
 
 # One minute (=60 seconds) timeout for each request to avoid hanging
 socket.setdefaulttimeout(60)
@@ -154,6 +160,9 @@ if __name__ == '__main__':
     parser.add_option('', '--urls', dest='urls', metavar='FILE', help='Read URLs from the specified file')
     parser.add_option('', '--hooks', dest='hooks', metavar='FILE', help='Use specified file as hooks.py module')
     parser.add_option('-e', '--display-errors', action='store_true', dest='display_errors', help='Include HTTP errors (404, etc..) in the output')
+    parser.add_option('-t', '--mailto', dest='email', metavar='ADDRESS', help='Send results via e-mail to ADDRESS')
+    parser.add_option('-f', '--mailfrom', dest='email_from', metavar='ADDRESS', help='Alternate From: address for e-mail (--mailto)')
+    parser.add_option('-s', '--smtp', dest='email_smtp', metavar='SERVER', help='SMTP server for e-mail (--mailto)')
 
     parser.set_defaults(verbose=False, display_errors=False)
 
@@ -172,6 +181,25 @@ if __name__ == '__main__':
         log.info('turning display of errors ON')
         display_errors = True
 
+    if options.email:
+        log.info('Send emails enabled')
+        enable_emails = True
+        email_smtp_server = options.email_smtp or 'localhost'
+        email_sender_address = options.email_from or options.email
+        email_receiver_address = options.email
+    else:
+        if options.email_from:
+            log.error('--mailfrom without --mailto')
+            print 'Error: --mailfrom needs --mailto'
+            sys.exit(1)
+
+        if options.email_smtp:
+            log.error('--smtp without --mailto')
+            print 'Error: --smtp needs --mailto'
+            sys.exit(1)
+
+        enable_emails = False
+
     if options.urls:
         if os.path.isfile(options.urls):
             urls_txt = options.urls
@@ -328,25 +356,37 @@ if __name__ == '__main__':
 
     end = datetime.datetime.now()
 
+    short_summary = ''
+
     # Output everything
     if len(summary) > 1:
         log.info('printing summary with %d items' % len(summary))
-        print '-'*line_length
-        print 'summary: %d changes' % (len(summary),)
-        print ''
+        short_summary = '-'*line_length + '\n'
+        short_summary += 'summary: %d changes' % (len(summary),) + '\n\n'
         for id, line in enumerate(summary):
-            print '%02d. %s' % (id+1, line)
-        print '-'*line_length
-        print '\n\n\n'
+            short_summary += '%02d. %s' % (id+1, line) + '\n'
+        short_summary += '-'*line_length + '\n'
+        short_summary += '\n\n\n'
+        print short_summary
     else:
         log.info('summary is too short - not printing')
     if len(details) > 1:
         log.info('printing details with %d items' % len(details))
         print '\n'.join(details)
         print '-- '
-        print '%s %s, %s' % (pkgname, __version__, __copyright__)
-        print 'Website: %s' % (__homepage__,)
+        print '%s %s, %s' % (pkgname, __version__, COPYRIGHT)
+        print 'Website: %s' % (__url__,)
         print 'watched %d URLs in %d seconds\n' % (count, (end-start).seconds)
+
+        if enable_emails:
+            try:
+                subject = 'Changes detected (%d)' % len(summary)
+                mailer.send(email_smtp_server, email_sender_address,
+                        email_receiver_address, subject,
+                        short_summary + '\n' + '\n'.join(details))
+                log.info('E-Mail to %s sent.', email_receiver_address)
+            except Exception, e:
+                log.warning('E-Mail delivery error: %s', e)
     else:
         log.info('no details collected - not printing')
 
diff --git a/urlwatch.1 b/urlwatch.1
deleted file mode 100644
index 012b708..0000000
--- a/urlwatch.1
+++ /dev/null
@@ -1,72 +0,0 @@
-.TH URLWATCH "1" "August 2012" "urlwatch 1.15" "User Commands"
-.SH NAME
-urlwatch \- Watch web pages and arbitrary URLs for changes
-.SH SYNOPSIS
-.B urlwatch
-[\fIoptions\fR]
-.SH DESCRIPTION
-urlwatch watches a list of URLs for changes and prints out unified
-diffs of the changes. You can filter always-changing parts of websites
-by providing a "hooks.py" script.
-.SH OPTIONS
-.TP
-\fB\-\-version\fR
-show program's version number and exit
-.TP
-\fB\-h\fR, \fB\-\-help\fR
-show the help message and exit
-.TP
-\fB\-v\fR, \fB\-\-verbose\fR
-Show debug/log output
-.TP
-\fB\-\-urls\fR=\fIFILE\fR
-Read URLs from the specified file
-.TP
-\fB\-\-hooks\fR=\fIFILE\fR
-Use specified file as hooks.py module
-.TP
-\fB\-e\fR, \fB\-\-display\-errors\fR
-Include HTTP errors (404, etc..) in the output
-.SH ADVANCED FEATURES
-urlwatch includes some advanced features that you have to activate by creating
-a hooks.py file that specifies for which URLs to use a specific feature. You
-can also use the hooks.py file to filter trivially-varying elements of a web
-page.
-.SS ICALENDAR FILE PARSING
-This module allows you to parse .ics files that are in iCalendar format and
-provide a very simplified text-based format for the diffs. Use it like this
-in your hooks.py file:
-
-  from urlwatch import ical2txt
-
-  def filter(url, data):
-      if url.endswith('.ics'):
-          return ical2txt.ical2text(data).encode('utf-8') + data
-      # ...you can add more hooks here...
-.SS HTML TO TEXT CONVERSION
-There are three methods of converting HTML to text in the current version of
-urlwatch: "lynx" (default), "html2text" and "re". The former two use
-command-line utilities of the same name to convert HTML to text, and the last
-one uses a simple regex-based tag stripping method (needs no extra tools).
-Here is an example of using it in your hooks.py file:
-
-  from urlwatch import html2txt
-
-  def filter(url, data):
-      if url.endswith('.html') or url.endswith('.htm'):
-          return html2txt.html2text(data, method='lynx')
-      # ...you can add more hooks here...
-.SH "FILES"
-.TP
-.B ~/.urlwatch/urls.txt
-A list of HTTP/FTP URLs to watch (one URL per line)
-.TP
-.B ~/.urlwatch/lib/hooks.py
-A Python module that can be used to filter contents
-.TP
-.B ~/.urlwatch/cache/
-The state of web pages is saved in this folder
-.SH AUTHOR
-Thomas Perl <thp.io/about>
-.SH WEBSITE
-http://thp.io/2008/urlwatch/
